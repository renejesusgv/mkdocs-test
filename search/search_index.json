{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Wizeline Knowledge Center Note : This section is under construction. The content from the upcoming sections is bound to change. The Wizeline Knowledge Center is a site for Wizeliners to consult technical documentation such as reference and research materials, tutorials, guides, among other resources. The contents of this site are for members from technology-related discipline teams including Development, SRE (Software Reliability Engineering), QA (Quality Assurance) Project Management, and any other team need to consult technical documentation or contribute to the knowledge center. Site Structure The site has multiple sections where you can find information related to each Wizeline discipline. The following sections detail the navigation of the Wizeline Knowledge Center. About The About tab contains information related to the site itself. You can consult the foundation documents that explain the value of the knowledge center, the research that Wizeline performed for the creation of this site, and have a complete understanding of this initiative's importance for the company and your team. Contributors The Contributors tab contains all the information you require for contributing to this site and to create content for Wizeline in general. For example, you can find articles that can help you with the following: Write documentation effectively. Improve the quality of your content. Be inclusive in your writing. Apply good technical writing practices. This tab also contains guides and tutorials that teach you how to create content, organize it, and publish it in the knowledge center. The following are examples of documents for contributors: Content Creation Guidelines and Resources. Style Guide for Contributors. Markdown Guide for Contributors. Development The Development tab contains all the information related to the Wizeline's Development team, whether you are part of a Mobile Development team, Software Engineering, and any Web-application-related discipline. SRE The SRE tab contains all the information related to Software Reliability Engineering (SRE). Here you can find information related to deployments, cloud computing, pipelines, and any process related to software CI/CD. QA Engineering The QA Engineering tab contains all the information related to Quality Assurance (QA) teams. Here you can find documentation about testing on Software Development Life Cycle (SDLC) and its different testing types, including unit tests, component tests, API tests, and UI tests. Project Management The Project Management tab contains all the internal information relevant for Project Managers. Find information about project execution methodologies, Wizeline's Agile Mindset, Business Model, Risk Management, and Wizeline projects.","title":"Wizeline Knowledge Center"},{"location":"index.html#wizeline-knowledge-center","text":"Note : This section is under construction. The content from the upcoming sections is bound to change. The Wizeline Knowledge Center is a site for Wizeliners to consult technical documentation such as reference and research materials, tutorials, guides, among other resources. The contents of this site are for members from technology-related discipline teams including Development, SRE (Software Reliability Engineering), QA (Quality Assurance) Project Management, and any other team need to consult technical documentation or contribute to the knowledge center.","title":"Wizeline Knowledge Center"},{"location":"index.html#site-structure","text":"The site has multiple sections where you can find information related to each Wizeline discipline. The following sections detail the navigation of the Wizeline Knowledge Center.","title":"Site Structure"},{"location":"index.html#about","text":"The About tab contains information related to the site itself. You can consult the foundation documents that explain the value of the knowledge center, the research that Wizeline performed for the creation of this site, and have a complete understanding of this initiative's importance for the company and your team.","title":"About"},{"location":"index.html#contributors","text":"The Contributors tab contains all the information you require for contributing to this site and to create content for Wizeline in general. For example, you can find articles that can help you with the following: Write documentation effectively. Improve the quality of your content. Be inclusive in your writing. Apply good technical writing practices. This tab also contains guides and tutorials that teach you how to create content, organize it, and publish it in the knowledge center. The following are examples of documents for contributors: Content Creation Guidelines and Resources. Style Guide for Contributors. Markdown Guide for Contributors.","title":"Contributors"},{"location":"index.html#development","text":"The Development tab contains all the information related to the Wizeline's Development team, whether you are part of a Mobile Development team, Software Engineering, and any Web-application-related discipline.","title":"Development"},{"location":"index.html#sre","text":"The SRE tab contains all the information related to Software Reliability Engineering (SRE). Here you can find information related to deployments, cloud computing, pipelines, and any process related to software CI/CD.","title":"SRE"},{"location":"index.html#qa-engineering","text":"The QA Engineering tab contains all the information related to Quality Assurance (QA) teams. Here you can find documentation about testing on Software Development Life Cycle (SDLC) and its different testing types, including unit tests, component tests, API tests, and UI tests.","title":"QA Engineering"},{"location":"index.html#project-management","text":"The Project Management tab contains all the internal information relevant for Project Managers. Find information about project execution methodologies, Wizeline's Agile Mindset, Business Model, Risk Management, and Wizeline projects.","title":"Project Management"},{"location":"2021-example.html","text":"Hello","title":"Example"},{"location":"about.github-as-ssot.html","text":"Analysis of a GitHub Project and a Static Site as a Single Source of Truth The purpose of this document is to present a brief analysis of using GitHub and a static site as a Single Source of Truth (SSOT) for Wizeline. Advantages and Disadvantages of Using GitHub to build a Single Source of Truth Using GitHub to build an SSOT has some advantages and disadvantages, this section considers those that have a bigger impact. Advantages GitHub and a static site as an SSOT have the following advantages: Version control : GitHub is built with version control in mind, it is its main purpose, and on the platform each file has a history that makes it easy to explore the changes that occurred to it. Collaboration : This is one of the main features of GitHub, it enables a seamless collaborative workflow with the help of branches and pull requests . Confidentiality : Customizable permissions enable you to restrict access to projects. Tool integration : GitHub provides flexibility with a wide range of tools and integrations that can improve the user experience and help create a more agile workflow. GitHub Marketplace offers numerous applications, some of them and some features are free. Additionally GitHub can integrate with third-party platforms like Amazon and Google Cloud. Already used : The majority of technical users within the organization are familiar with GitHub and use it to collaborate on projects. Identity and access : GitHub has transparent tools to manage access to repositories; this article on identity and access management for your enterprise details the access options for an organization. Markdown : GitHub interprets Markdown language natively. You can create and edit documents within the platform. Governance : You can setup governance rules for the project that work best for the organization and update as needed. This article on leadership and governance explores the topic in depth. Cost : You can create projects using numerous free tier features and the services that incur a fee are affordable. Disadvantages GitHub and a static site as an SSOT have the following disadvantages: Adoption rate : Depending on the technical level of the user, adoption rates can vary. It is difficult for first-time users of GitHub, Git and version control in general, to adapt to the tools. Accessibility : Compared to Confluence, creating and sharing content on GitHub requires a few more steps; therefore, there is a learning curve for non-technical users. Security : GitHub offers the possibility of private repositories, but there is a low level of detail that you can set up. If a user has access to a repository it means access to the whole project. Additionally, GitHub provides the security settings; therefore, they don't depend on the organization. GitHub security breaches can expose your projects. GitHub as a Single Source of Truth for Wizeline The following sections explore the different things Wizeline must consider to implement GitHub as an SSOT for Wizeline. How to Allow Any Wizeliner to Contribute GitHub was created with collaboration in mind, but it also provides the ability to manage access with a certain degree of granularity. You can change permissions for a team or person as indicated in this article about managing teams and people with access to your repository . How to Keep Information Up to Date With the integrations and tools available for GitHub, you can run automatic checks for your documentation to verify the status of the content. For example, you can run tests to check that any links included in the documents are working properly. GitHub enables teams to avoid manual tasks that are slow and prone to errors. For this reason, documentation maintenance becomes an easier, more efficient task when using this tool. How to Decentralize the Governance of Documentation With the help of automation, you can implement strategies that make new content go through certain filters before publishing. These filters can work at different tiers, going from recommendations to errors. The workflow does not get interrupted and it is not depending only on a review from a human. This makes it possible to operate with an approach that looks more like guardrails rather than that of gatekeepers. How to Propose Changes Across Multiple Documents or Pages One of the main advantages of using Git is that you can propose changes across various documents with one request. This increases flexibility and enables collaborations to make a bigger impact. How to Make Contributing Accessible for Non-Technical and Technical users Technical users are already familiar with version control and can easily adapt to this style of collaboration. However there is a learning curve to consider with non-technical users; they need to become familiar with the terms and tools for Git and GitHub. The organization must design a teaching strategy for those who are using this system for the first time. How to Make Finding Information Easy and Intuitive Searching code and files on GitHub is not only limited to knowing a few key words or the name of the specific file. The search capabilities of the site are extensive and useful. On the static site side, finding information depends on the configurations set in place. This gives the team flexibility to better adapt to the needs of the users and is superior to other platforms that don't have the option to modify the search process. How to Make Async Collaboration Possible Async collaboration can come in the form of collaborative editing and review processes. This is one of the main features that the organization can take advantage of when using GitHub. There is a seamless contribution and review process in place. Teams must agree on a few rules and the platform can handle the rest. How to Make Wizeliners Aware of Needed Contributions GitHub enables you to create projects, this functionality includes a board that aligns with agile methodologies and follows the same structure as Jira boards and Trello, tools that the members of the organization already know and use. How to Get Feedback from the Right People for Contributions Similar to using Confluence, Wizeline needs tooling and governance to achieve this, but many of the tools that enable this on GitHub are free and have a seamless integration to the workflow.","title":"GitHub Project and Static Site as SSOT"},{"location":"about.github-as-ssot.html#analysis-of-a-github-project-and-a-static-site-as-a-single-source-of-truth","text":"The purpose of this document is to present a brief analysis of using GitHub and a static site as a Single Source of Truth (SSOT) for Wizeline.","title":"Analysis of a GitHub Project and a Static Site as a Single Source of Truth"},{"location":"about.github-as-ssot.html#advantages-and-disadvantages-of-using-github-to-build-a-single-source-of-truth","text":"Using GitHub to build an SSOT has some advantages and disadvantages, this section considers those that have a bigger impact.","title":"Advantages and Disadvantages of Using GitHub to build a Single Source of Truth"},{"location":"about.github-as-ssot.html#advantages","text":"GitHub and a static site as an SSOT have the following advantages: Version control : GitHub is built with version control in mind, it is its main purpose, and on the platform each file has a history that makes it easy to explore the changes that occurred to it. Collaboration : This is one of the main features of GitHub, it enables a seamless collaborative workflow with the help of branches and pull requests . Confidentiality : Customizable permissions enable you to restrict access to projects. Tool integration : GitHub provides flexibility with a wide range of tools and integrations that can improve the user experience and help create a more agile workflow. GitHub Marketplace offers numerous applications, some of them and some features are free. Additionally GitHub can integrate with third-party platforms like Amazon and Google Cloud. Already used : The majority of technical users within the organization are familiar with GitHub and use it to collaborate on projects. Identity and access : GitHub has transparent tools to manage access to repositories; this article on identity and access management for your enterprise details the access options for an organization. Markdown : GitHub interprets Markdown language natively. You can create and edit documents within the platform. Governance : You can setup governance rules for the project that work best for the organization and update as needed. This article on leadership and governance explores the topic in depth. Cost : You can create projects using numerous free tier features and the services that incur a fee are affordable.","title":"Advantages"},{"location":"about.github-as-ssot.html#disadvantages","text":"GitHub and a static site as an SSOT have the following disadvantages: Adoption rate : Depending on the technical level of the user, adoption rates can vary. It is difficult for first-time users of GitHub, Git and version control in general, to adapt to the tools. Accessibility : Compared to Confluence, creating and sharing content on GitHub requires a few more steps; therefore, there is a learning curve for non-technical users. Security : GitHub offers the possibility of private repositories, but there is a low level of detail that you can set up. If a user has access to a repository it means access to the whole project. Additionally, GitHub provides the security settings; therefore, they don't depend on the organization. GitHub security breaches can expose your projects.","title":"Disadvantages"},{"location":"about.github-as-ssot.html#github-as-a-single-source-of-truth-for-wizeline","text":"The following sections explore the different things Wizeline must consider to implement GitHub as an SSOT for Wizeline.","title":"GitHub as a Single Source of Truth for Wizeline"},{"location":"about.github-as-ssot.html#how-to-allow-any-wizeliner-to-contribute","text":"GitHub was created with collaboration in mind, but it also provides the ability to manage access with a certain degree of granularity. You can change permissions for a team or person as indicated in this article about managing teams and people with access to your repository .","title":"How to Allow Any Wizeliner to Contribute"},{"location":"about.github-as-ssot.html#how-to-keep-information-up-to-date","text":"With the integrations and tools available for GitHub, you can run automatic checks for your documentation to verify the status of the content. For example, you can run tests to check that any links included in the documents are working properly. GitHub enables teams to avoid manual tasks that are slow and prone to errors. For this reason, documentation maintenance becomes an easier, more efficient task when using this tool.","title":"How to Keep Information Up to Date"},{"location":"about.github-as-ssot.html#how-to-decentralize-the-governance-of-documentation","text":"With the help of automation, you can implement strategies that make new content go through certain filters before publishing. These filters can work at different tiers, going from recommendations to errors. The workflow does not get interrupted and it is not depending only on a review from a human. This makes it possible to operate with an approach that looks more like guardrails rather than that of gatekeepers.","title":"How to Decentralize the Governance of Documentation"},{"location":"about.github-as-ssot.html#how-to-propose-changes-across-multiple-documents-or-pages","text":"One of the main advantages of using Git is that you can propose changes across various documents with one request. This increases flexibility and enables collaborations to make a bigger impact.","title":"How to Propose Changes Across Multiple Documents or Pages"},{"location":"about.github-as-ssot.html#how-to-make-contributing-accessible-for-non-technical-and-technical-users","text":"Technical users are already familiar with version control and can easily adapt to this style of collaboration. However there is a learning curve to consider with non-technical users; they need to become familiar with the terms and tools for Git and GitHub. The organization must design a teaching strategy for those who are using this system for the first time.","title":"How to Make Contributing Accessible for Non-Technical and Technical users"},{"location":"about.github-as-ssot.html#how-to-make-finding-information-easy-and-intuitive","text":"Searching code and files on GitHub is not only limited to knowing a few key words or the name of the specific file. The search capabilities of the site are extensive and useful. On the static site side, finding information depends on the configurations set in place. This gives the team flexibility to better adapt to the needs of the users and is superior to other platforms that don't have the option to modify the search process.","title":"How to Make Finding Information Easy and Intuitive"},{"location":"about.github-as-ssot.html#how-to-make-async-collaboration-possible","text":"Async collaboration can come in the form of collaborative editing and review processes. This is one of the main features that the organization can take advantage of when using GitHub. There is a seamless contribution and review process in place. Teams must agree on a few rules and the platform can handle the rest.","title":"How to Make Async Collaboration Possible"},{"location":"about.github-as-ssot.html#how-to-make-wizeliners-aware-of-needed-contributions","text":"GitHub enables you to create projects, this functionality includes a board that aligns with agile methodologies and follows the same structure as Jira boards and Trello, tools that the members of the organization already know and use.","title":"How to Make Wizeliners Aware of Needed Contributions"},{"location":"about.github-as-ssot.html#how-to-get-feedback-from-the-right-people-for-contributions","text":"Similar to using Confluence, Wizeline needs tooling and governance to achieve this, but many of the tools that enable this on GitHub are free and have a seamless integration to the workflow.","title":"How to Get Feedback from the Right People for Contributions"},{"location":"contributors.explain.SSOT-importance.html","text":"SSOT Definition and Benefits This document explains the Single Source of Truth (SSOT) concept and the benefits for Wizeline in implementing this model company-wide. What is an SSOT? A Single Source of Truth is a place where you store all the documentation of an enterprise. This model ensures that every team member, regardless of their role in the enterprise, has access to the same information when making decisions. Even if Wizeline has Technical Writing and Development teams, all the existing documentation exists on different platforms with different access levels. This practice causes to have shareable knowledge that is not easily accessible for other members of Wizeline. Benefits of Having an SSOT The following are the main benefits of building an SSOT for Wizeline. Find all related information in the same place : If all the team members store their documentation in the same place and follow the same naming and format conventions, the information becomes easy to find. Compare past and present projects : By having all the past documentation, the team can make more informed choices for the present and future projects. Marketing can create better campaigns, developers can find patterns from a different project, and executives can have more precise objectives and key results (OKRs) available. Work together and simultaneously on tasks : SSOT enables teams to access a document and collaborate simultaneously. All team members can add information, and the rest of the team can avoid working on the same file twice. Platforms for SSOT Wizeline uses multiple platforms to store documentation. Google Drive and Confluence are some examples that Wizeline used before. This initiative does not require committing to one specific tool but having a defined process to access all available documentation easily. References and Further Reading Consult the following resources for more information on SSOT: SSOT by Atlassian","title":"SSOT Definition and Benefits"},{"location":"contributors.explain.SSOT-importance.html#ssot-definition-and-benefits","text":"This document explains the Single Source of Truth (SSOT) concept and the benefits for Wizeline in implementing this model company-wide.","title":"SSOT Definition and Benefits"},{"location":"contributors.explain.SSOT-importance.html#what-is-an-ssot","text":"A Single Source of Truth is a place where you store all the documentation of an enterprise. This model ensures that every team member, regardless of their role in the enterprise, has access to the same information when making decisions. Even if Wizeline has Technical Writing and Development teams, all the existing documentation exists on different platforms with different access levels. This practice causes to have shareable knowledge that is not easily accessible for other members of Wizeline.","title":"What is an SSOT?"},{"location":"contributors.explain.SSOT-importance.html#benefits-of-having-an-ssot","text":"The following are the main benefits of building an SSOT for Wizeline. Find all related information in the same place : If all the team members store their documentation in the same place and follow the same naming and format conventions, the information becomes easy to find. Compare past and present projects : By having all the past documentation, the team can make more informed choices for the present and future projects. Marketing can create better campaigns, developers can find patterns from a different project, and executives can have more precise objectives and key results (OKRs) available. Work together and simultaneously on tasks : SSOT enables teams to access a document and collaborate simultaneously. All team members can add information, and the rest of the team can avoid working on the same file twice.","title":"Benefits of Having an SSOT"},{"location":"contributors.explain.SSOT-importance.html#platforms-for-ssot","text":"Wizeline uses multiple platforms to store documentation. Google Drive and Confluence are some examples that Wizeline used before. This initiative does not require committing to one specific tool but having a defined process to access all available documentation easily.","title":"Platforms for SSOT"},{"location":"contributors.explain.SSOT-importance.html#references-and-further-reading","text":"Consult the following resources for more information on SSOT: SSOT by Atlassian","title":"References and Further Reading"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html","text":"Foundations of Wizeline's SSOT This document explains the need for automation and governance decentralization on a Single Source of Truth (SSOT) implementation as the Wizeline organization grows and how it helps to optimize problem-solving. This Foundations exercise also covers the need for decoupling reading from writing as an essential concept when creating documents. Document Maintenance for an SSOT Having a maintenance system in place means that every document is available to the team members at any time. The main goal of maintenance is to have all the files updated and in the latest version, so everyone involved in a project have the latest information at any given time and make more informed decisions. Just as a software development team requires all its members to follow a process to prepare, create, review, and publish code; documentation must have a similar approach to make it easier to maintain and update content. This defined workflow ensures the usefulness of the information and how accessible it can become for all company members. Different existing tools can accompany developers and writers through a writing process. The main challenge of implementing document maintenance solutions is to have the team members get used to the process and follow it. Every team member must know how and when they need to create documents, the conventions they must follow, and the responsible reviewers and publishers. Most maintenance methods recommend having a supervisor to ensure the governance of the workflow. Governance for an SSOT By definition, governance sets boundaries, protocols, procedures, and policies to prevent collaborators from following a wrong path while working. These boundaries force the team members to stay on the right track, but they are often perceived as blockers that prevent them from finishing their tasks. Governance requires guardrails to function correctly, and these are high-level rules that provide ongoing authority for the environments the team uses. Guardrails can be preventive and detective. Preventive guardrails enforce practices to help ensure compliance and disallow actions that lead to policy violations. Detective guardrails find non-compliance of used resources, such as policy violations, and help alert you when something needs a solution. Even though governance actively limits collaborators to not deviate from specific processes, it also brings benefits to the company and its team members: Ensures efficiency, quality, and compliance of all the developed products. Maintains a secure cloud environment for software development. Grants adequate permission levels to team members and service providers. Gives software developers freedom inside the boundaries to decide how they want to solve a problem. The alternative for the governance mindset is guidance. The difference is in the approach of how teams achieve their results. While governance feels like a restrictive environment, guidance looks to create a path directing team members to take actions accordingly. Guidance requires teams to know how the process works, teach it to others, and become mentors to ensure reliability. The guidance mindset is tougher to achieve. It requires teams to have resources such as training material available at any time, having flowcharts to ensure decisions on solutions, and requires all team members to maintain a positive and supportive attitude. Automation for Governance Decentralization and Document Maintenance According to IBM, automation is creating and applying technologies to do tasks with minimal human intervention. Using automation tools ensures that the team members do not see the document maintenance tasks as extra efforts and focus on creating software and documentation. The following are some examples of automation for documentation maintenance: Grammarly helps team members to write correctly and to use a specific tone on their documents. Checks and linter settings ensure covering the technical requirements of a document publication. Templates to look after the style of a new file can be available for every team member. The following are some examples of automation for governance decentralization: Having all the data in a cloud environment. Setting responsive, preventive, directive, and detective controls. Allowing teams to choose their dependencies. Building, releasing, and running is possible, regardless of the tools that the team used. Decentralization Benefits for Wizeliners Wizeline members are experts in their areas. They are always looking for issues to fix for their clients with a consultor's mindset following an agile approach. As Wizeline keeps growing, the company must find tools to maintain the development processes running smoothly. Wizeline trusts on their collaborators, and by following a decentralized model, the Wizeliners can: Get to use tools they know without the need for authorization. Adapt faster to their clients' needs. Use their time more effectively without needing to spend resources setting environments outside the cloud. Decoupling Reading and Writing In Wizeline, the team has access to different documentation tools. For example, every Wizeliner has a Google Drive and a Jira+Confluence account. Project teams organize and decide which tools they are going to use for their documentation, and they commit to developing all their files in one platform, even if it does not fully cover all the needs of the project. By giving the teams flexibility in choosing a solution, Wizeline has started to have multiple sets of documentation scattered through different platforms. It is not easy to convert a document from Google Docs to a Confluence page, and it takes a lot of effort to do so. Even if Wizeliners know that they have a piece of information, the tool's structure is constraining. As a contributor, using the customization features that the solution offers enhances and makes the writing process more manageable. Writers and readers have different interests when it comes to any technical text. Writers need to explain how a product works and solve the readers' questions as fast and as accessible as possible. Writers do their best when they place all the related information correctly and use a powerful tool. Readers of technical texts rarely read the complete document. Usually, they are just searching for specific doubts and questions. Readers care about having a powerful search engine that can save them time and quickly find information. Even if they need different things, a Headless Content Management System (CMS) can help to cover the company's needs. It is a system that can send information and documents through the use of an API. You do not need to think of the format when adding content since the retriever is in charge. References and Further Reading Consult the following resources for more information on Automation, Governance Decentralization, and decoupling: Decentralized Governance - Amazon Web Services Controls and Guardrails - Amazon Web Services Governance Balance Between Agility and Safety - Amazon Web Services Governance or Guidance? - Tech Republic Taking Care of the Present - Garry Pearson Headless CMS Explained in 5 Effective Minutes - Storyblok Headless CMS Vs Decoupled CMS: The Ultimate Guide - Zesty What is Automation? - IBM","title":"Foundations of Wizeline's SSOT"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#foundations-of-wizelines-ssot","text":"This document explains the need for automation and governance decentralization on a Single Source of Truth (SSOT) implementation as the Wizeline organization grows and how it helps to optimize problem-solving. This Foundations exercise also covers the need for decoupling reading from writing as an essential concept when creating documents.","title":"Foundations of Wizeline's SSOT"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#document-maintenance-for-an-ssot","text":"Having a maintenance system in place means that every document is available to the team members at any time. The main goal of maintenance is to have all the files updated and in the latest version, so everyone involved in a project have the latest information at any given time and make more informed decisions. Just as a software development team requires all its members to follow a process to prepare, create, review, and publish code; documentation must have a similar approach to make it easier to maintain and update content. This defined workflow ensures the usefulness of the information and how accessible it can become for all company members. Different existing tools can accompany developers and writers through a writing process. The main challenge of implementing document maintenance solutions is to have the team members get used to the process and follow it. Every team member must know how and when they need to create documents, the conventions they must follow, and the responsible reviewers and publishers. Most maintenance methods recommend having a supervisor to ensure the governance of the workflow.","title":"Document Maintenance for an SSOT"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#governance-for-an-ssot","text":"By definition, governance sets boundaries, protocols, procedures, and policies to prevent collaborators from following a wrong path while working. These boundaries force the team members to stay on the right track, but they are often perceived as blockers that prevent them from finishing their tasks. Governance requires guardrails to function correctly, and these are high-level rules that provide ongoing authority for the environments the team uses. Guardrails can be preventive and detective. Preventive guardrails enforce practices to help ensure compliance and disallow actions that lead to policy violations. Detective guardrails find non-compliance of used resources, such as policy violations, and help alert you when something needs a solution. Even though governance actively limits collaborators to not deviate from specific processes, it also brings benefits to the company and its team members: Ensures efficiency, quality, and compliance of all the developed products. Maintains a secure cloud environment for software development. Grants adequate permission levels to team members and service providers. Gives software developers freedom inside the boundaries to decide how they want to solve a problem. The alternative for the governance mindset is guidance. The difference is in the approach of how teams achieve their results. While governance feels like a restrictive environment, guidance looks to create a path directing team members to take actions accordingly. Guidance requires teams to know how the process works, teach it to others, and become mentors to ensure reliability. The guidance mindset is tougher to achieve. It requires teams to have resources such as training material available at any time, having flowcharts to ensure decisions on solutions, and requires all team members to maintain a positive and supportive attitude.","title":"Governance for an SSOT"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#automation-for-governance-decentralization-and-document-maintenance","text":"According to IBM, automation is creating and applying technologies to do tasks with minimal human intervention. Using automation tools ensures that the team members do not see the document maintenance tasks as extra efforts and focus on creating software and documentation. The following are some examples of automation for documentation maintenance: Grammarly helps team members to write correctly and to use a specific tone on their documents. Checks and linter settings ensure covering the technical requirements of a document publication. Templates to look after the style of a new file can be available for every team member. The following are some examples of automation for governance decentralization: Having all the data in a cloud environment. Setting responsive, preventive, directive, and detective controls. Allowing teams to choose their dependencies. Building, releasing, and running is possible, regardless of the tools that the team used.","title":"Automation for Governance Decentralization and Document Maintenance"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#decentralization-benefits-for-wizeliners","text":"Wizeline members are experts in their areas. They are always looking for issues to fix for their clients with a consultor's mindset following an agile approach. As Wizeline keeps growing, the company must find tools to maintain the development processes running smoothly. Wizeline trusts on their collaborators, and by following a decentralized model, the Wizeliners can: Get to use tools they know without the need for authorization. Adapt faster to their clients' needs. Use their time more effectively without needing to spend resources setting environments outside the cloud.","title":"Decentralization Benefits for Wizeliners"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#decoupling-reading-and-writing","text":"In Wizeline, the team has access to different documentation tools. For example, every Wizeliner has a Google Drive and a Jira+Confluence account. Project teams organize and decide which tools they are going to use for their documentation, and they commit to developing all their files in one platform, even if it does not fully cover all the needs of the project. By giving the teams flexibility in choosing a solution, Wizeline has started to have multiple sets of documentation scattered through different platforms. It is not easy to convert a document from Google Docs to a Confluence page, and it takes a lot of effort to do so. Even if Wizeliners know that they have a piece of information, the tool's structure is constraining. As a contributor, using the customization features that the solution offers enhances and makes the writing process more manageable. Writers and readers have different interests when it comes to any technical text. Writers need to explain how a product works and solve the readers' questions as fast and as accessible as possible. Writers do their best when they place all the related information correctly and use a powerful tool. Readers of technical texts rarely read the complete document. Usually, they are just searching for specific doubts and questions. Readers care about having a powerful search engine that can save them time and quickly find information. Even if they need different things, a Headless Content Management System (CMS) can help to cover the company's needs. It is a system that can send information and documents through the use of an API. You do not need to think of the format when adding content since the retriever is in charge.","title":"Decoupling Reading and Writing"},{"location":"contributors.explain.Wizeline-SSOT-Foundations.html#references-and-further-reading","text":"Consult the following resources for more information on Automation, Governance Decentralization, and decoupling: Decentralized Governance - Amazon Web Services Controls and Guardrails - Amazon Web Services Governance Balance Between Agility and Safety - Amazon Web Services Governance or Guidance? - Tech Republic Taking Care of the Present - Garry Pearson Headless CMS Explained in 5 Effective Minutes - Storyblok Headless CMS Vs Decoupled CMS: The Ultimate Guide - Zesty What is Automation? - IBM","title":"References and Further Reading"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html","text":"Analysis of Confluence as a Single Source of Truth The purpose of this document is to present a brief analysis of Confluence as a single source of truth (SSOT) for Wizeline. Advantages and Disadvantages of Confluence as a Single Source of Truth Confluence as SSOT has some advantages and disadvantages, this section considers those that have a bigger impact. Advantages Confluence as SSOT has the following advantages: Confidentiality : Customizable permissions enable you to restrict access to specific documents. Accessibility : Ease of content creation. Tool integration : Confluence integrations and apps and links to other Atlassian products enhance the user experience and provide versatility. Adoption rate : Confluence has a higher usability and adoption rate as it includes a Rich Text Editor (RTE) within the platform. Already used : Confluence is already well adopted within Wizeline, and is inherently connected to JIRA, another platform extensively in use within Wizeline. Identity and access : Confluence has a built-in identity and access management (IAM), which suits the organization's needs for documentation. Version control : Confluence has internal version control, the versioning is maintained independently of the way you contribute (git or RTE). Here is an example of a well-maintained Confluence site: Wizeline Technical Writers (WTW) . Disadvantages Confluence as SSOT has the following disadvantages: Automation cost : Each plugin or application for governance or automation requires you to buy a license. Collaboration : It is challenging to collaborate at the same time on the platform. Scalability : Confluence projects are difficult to scale . Search capabilities : Search is limited; it is not easy to find information if you don't know the proper keywords, labels, and spaces. Governance : Governance in Confluence is similar to Google Drive\u2019s; governance rules must be in place and enforced by the company, but ultimately, they are the responsibility of the contributors. Contributions : There is a limited number of contributors that can update the Confluence space, this can create workflow issues. Outdated content : Outdated content often exists on Confluence, this defeats the purpose of acting as SSOT. Human source of truth : Up to date information often exists in a draft form accessible to only a few contributors; this leads teams to depend on a human source for the updated information. Confluence Success Story A global brand shared with Atlassian their experience successfully using Confluence as SSOT and creating and maintaining it . The main takeaways of their success are: Decentralize authority and centralize information. Create a single source of truth. Maintain that single source of truth. Create and cross-train on processes. Confluence as a Single Source of Truth for Wizeline The following sections explore the different things Wizeline must consider to implement Confluence as an SSOT for Wizeline. How to Any Wizeliner to Contribute It is important to consider Access Management around spaces and pages. Confluence admits a certain level of access granularity, you can set gatekeepers for users and groups per space and page. The following image provides a visual of the currently available options: On the other hand, maintenance and administration are manual, difficult, and only available for a small group of admins and space admins. How to Keep Information Up to Date Wizeline can set up tools to highlight out-of-date content, and if it is not updated, archive it. There is an option for a manual process but Wizeline can buy tooling or use self-made tools. The following are a couple of available tools: Outdated for Confluence Better Content Archiving for Confluence Tooling is not ideal because it is expensive and licensed per number of users, which means that it is not a one time buy. Atlassian developer is not a core skill for Wizeline engineering, maintaining the tools can be difficult. How to Decentralize the Governance of Documentation Traffic lights are a great example of decentralized governance. City traffic lights can be timed individually or in small groups, or they can react to sensors. However, for the city as a whole, there is no need for a \u201cmaster\u201d traffic control center to keep cars moving. In this example, local optimizations work together to provide a city-wide solution. Decentralized governance applied to an SSOT helps remove potential bottlenecks that would prevent contributors from submitting documentation. Confluence does not have automated checks; Wizeline must rely on a gated review process, education, and following standardized procedures. It is possible to implement one or more of the following tools: Comala Document Management Page Approval for Confluence Pull Requests for Confluence Pages As mentioned before, these tools are expensive and if they don't have a specific feature, it is not simple to add it; possible solutions can be complex. How to Propose Changes Across Multiple Documents or Pages On Confluence, changes across multiple documents or pages are not possible with a single proposal, it is limited to one page at a time. How to Make Contributing Accessible for Non-Technical and Technical users Adding content to Confluence is simple; if a user has used a rich text editor, they can easily make contributions. The challenge is maintaining a structure for the content. Every content creator must have visibility of where they can create a new page and follow a structure set by the team. How to Make Finding Information Easy and Intuitive The key to having the best possible experience when looking for information is the set up of Confluence Spaces and Pages. There are best practices that will make finding information easier; for example, these guidelines can be a good place to start. You must keep in mind that search is dependent mainly on labels and title text. How to Make Async Collaboration Possible Async collaboration can come in the form of collaborative editing and review processes. It is possible to work a collective strategy for Confluence content, but there are significant limitations, as this article explains. How to Make Wizeliners Aware of Needed Contributions A helpful tool for pending tasks is Jira, where the team can set up a board and follow up on the backlog. Confluence integrates well with other Atlassian products and Wizeliners are already familiar with Jira. How to Get Feedback from the Right People for Contributions Similar to How to Decentralize the Governance of Documentation Wizeline needs tooling and governance to achieve this.","title":"Confluence as SSOT"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#analysis-of-confluence-as-a-single-source-of-truth","text":"The purpose of this document is to present a brief analysis of Confluence as a single source of truth (SSOT) for Wizeline.","title":"Analysis of Confluence as a Single Source of Truth"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#advantages-and-disadvantages-of-confluence-as-a-single-source-of-truth","text":"Confluence as SSOT has some advantages and disadvantages, this section considers those that have a bigger impact.","title":"Advantages and Disadvantages of Confluence as a Single Source of Truth"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#advantages","text":"Confluence as SSOT has the following advantages: Confidentiality : Customizable permissions enable you to restrict access to specific documents. Accessibility : Ease of content creation. Tool integration : Confluence integrations and apps and links to other Atlassian products enhance the user experience and provide versatility. Adoption rate : Confluence has a higher usability and adoption rate as it includes a Rich Text Editor (RTE) within the platform. Already used : Confluence is already well adopted within Wizeline, and is inherently connected to JIRA, another platform extensively in use within Wizeline. Identity and access : Confluence has a built-in identity and access management (IAM), which suits the organization's needs for documentation. Version control : Confluence has internal version control, the versioning is maintained independently of the way you contribute (git or RTE). Here is an example of a well-maintained Confluence site: Wizeline Technical Writers (WTW) .","title":"Advantages"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#disadvantages","text":"Confluence as SSOT has the following disadvantages: Automation cost : Each plugin or application for governance or automation requires you to buy a license. Collaboration : It is challenging to collaborate at the same time on the platform. Scalability : Confluence projects are difficult to scale . Search capabilities : Search is limited; it is not easy to find information if you don't know the proper keywords, labels, and spaces. Governance : Governance in Confluence is similar to Google Drive\u2019s; governance rules must be in place and enforced by the company, but ultimately, they are the responsibility of the contributors. Contributions : There is a limited number of contributors that can update the Confluence space, this can create workflow issues. Outdated content : Outdated content often exists on Confluence, this defeats the purpose of acting as SSOT. Human source of truth : Up to date information often exists in a draft form accessible to only a few contributors; this leads teams to depend on a human source for the updated information.","title":"Disadvantages"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#confluence-success-story","text":"A global brand shared with Atlassian their experience successfully using Confluence as SSOT and creating and maintaining it . The main takeaways of their success are: Decentralize authority and centralize information. Create a single source of truth. Maintain that single source of truth. Create and cross-train on processes.","title":"Confluence Success Story"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#confluence-as-a-single-source-of-truth-for-wizeline","text":"The following sections explore the different things Wizeline must consider to implement Confluence as an SSOT for Wizeline.","title":"Confluence as a Single Source of Truth for Wizeline"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-any-wizeliner-to-contribute","text":"It is important to consider Access Management around spaces and pages. Confluence admits a certain level of access granularity, you can set gatekeepers for users and groups per space and page. The following image provides a visual of the currently available options: On the other hand, maintenance and administration are manual, difficult, and only available for a small group of admins and space admins.","title":"How to Any Wizeliner to Contribute"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-keep-information-up-to-date","text":"Wizeline can set up tools to highlight out-of-date content, and if it is not updated, archive it. There is an option for a manual process but Wizeline can buy tooling or use self-made tools. The following are a couple of available tools: Outdated for Confluence Better Content Archiving for Confluence Tooling is not ideal because it is expensive and licensed per number of users, which means that it is not a one time buy. Atlassian developer is not a core skill for Wizeline engineering, maintaining the tools can be difficult.","title":"How to Keep Information Up to Date"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-decentralize-the-governance-of-documentation","text":"Traffic lights are a great example of decentralized governance. City traffic lights can be timed individually or in small groups, or they can react to sensors. However, for the city as a whole, there is no need for a \u201cmaster\u201d traffic control center to keep cars moving. In this example, local optimizations work together to provide a city-wide solution. Decentralized governance applied to an SSOT helps remove potential bottlenecks that would prevent contributors from submitting documentation. Confluence does not have automated checks; Wizeline must rely on a gated review process, education, and following standardized procedures. It is possible to implement one or more of the following tools: Comala Document Management Page Approval for Confluence Pull Requests for Confluence Pages As mentioned before, these tools are expensive and if they don't have a specific feature, it is not simple to add it; possible solutions can be complex.","title":"How to Decentralize the Governance of Documentation"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-propose-changes-across-multiple-documents-or-pages","text":"On Confluence, changes across multiple documents or pages are not possible with a single proposal, it is limited to one page at a time.","title":"How to Propose Changes Across Multiple Documents or Pages"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-make-contributing-accessible-for-non-technical-and-technical-users","text":"Adding content to Confluence is simple; if a user has used a rich text editor, they can easily make contributions. The challenge is maintaining a structure for the content. Every content creator must have visibility of where they can create a new page and follow a structure set by the team.","title":"How to Make Contributing Accessible for Non-Technical and Technical users"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-make-finding-information-easy-and-intuitive","text":"The key to having the best possible experience when looking for information is the set up of Confluence Spaces and Pages. There are best practices that will make finding information easier; for example, these guidelines can be a good place to start. You must keep in mind that search is dependent mainly on labels and title text.","title":"How to Make Finding Information Easy and Intuitive"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-make-async-collaboration-possible","text":"Async collaboration can come in the form of collaborative editing and review processes. It is possible to work a collective strategy for Confluence content, but there are significant limitations, as this article explains.","title":"How to Make Async Collaboration Possible"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-make-wizeliners-aware-of-needed-contributions","text":"A helpful tool for pending tasks is Jira, where the team can set up a board and follow up on the backlog. Confluence integrates well with other Atlassian products and Wizeliners are already familiar with Jira.","title":"How to Make Wizeliners Aware of Needed Contributions"},{"location":"contributors.explain.docs-as-code.confluence-as-ssot.html#how-to-get-feedback-from-the-right-people-for-contributions","text":"Similar to How to Decentralize the Governance of Documentation Wizeline needs tooling and governance to achieve this.","title":"How to Get Feedback from the Right People for Contributions"},{"location":"contributors.explain.docs-as-code.problem-statement-and-proposal.html","text":"This page contains a description of the problem that this project aims to fix. It includes a collection of the real-life situations that motivated this effort. Vision of the Project To ensure that all Wizeliners base their business and engineering decisions on the same data and documentation sources. Problem Statement Having a productive, collaborative, and efficient workplace requires having your company's information consolidated. That means knowing what you have, where it is, and who has access to it. In this way, employees can easily access the correct and up-to-date information. The new value that companies provide is to have all the up-to-date information in an SSOT (Single Source of Truth), enabling companies to do business and make effective technical decisions. The amount of content that Wizeline manages across teams, disciplines, academies, communities, projects, clients, and portfolios is growing at a fast rate. This situation brings challenges that often put Wizeline at a disadvantage, negatively impacting operational efficiency and creating barriers for decision-making. Examples of these challenges are: Multiple employees contribute and edit content without awareness of what contributions others have made or are making. Example: Wizeliners are generating content in Google Drive, Confluence, and team sites. Lack of a system that ensures consistency and quality across information created and shared. Example: No governance or agreed rules exist when creating or maintaining documentation. Changes to content do not register, and the systems do not track them; this makes it difficult to track the source of the original document or related documents. Example: Often, you see manual versioning of documents (manual copies or the versioning feature of the document), which causes links in documents to break. Searching for documents across independent and siloed systems becomes complex and time-consuming. Example: Multiple places to store information with no structure exist. Isolated systems can lead people to not knowing specific documents and not having permission to see them. Example: Wizeliners store Google Drive documents in their drive, and there is no standard to store things in a shared drive or structure. Example: Wizeliners store information in Confluence or team Google Sites with low visibility. Content fragments within the organization in multiple sources include: Using presentations as documentation. Creating duplicates of documents with minor adjustments. Informal versioning. Having official information in unofficial systems such as Trello, Notion, Evernote, Mural, Miro, among others. This multiple-source structure causes the following: Duplication of information. Uncertainty about up-to-date or outdated information. Distributed information in various platforms around original documents and current versions. Wizeliners spend too much time following up with coworkers, waiting for a response, and attempting to facilitate collaboration when working with documents. Example: Wizeliners feel that it is faster to ask for information by using Slack regarding documentation rather than spending time trying to find it. Maintenance of the information is restricted for specific people and does not allow feedback on the same platform. Example: Google Drive documents are read-only, and there is no option for commenting or suggesting. These documents require the owner to grant permission. Example: Google Drive documents are in hard-to-find shared drives and are not available to all Wizeliners. Solution Proposal To solve the challenges from the Problem Statement, Wizeline proposes an SSOT strategy with the right tools that allow: Fast access to information for quickly making decisions or complete tasks. Keep information always up to date. Automated administrative tasks. Governance that does not \"gatekeep\" users from accessing, but rather guardrails. Gatekeepers : An approach that often introduces delays with the chain of approval or access requests. Guardrails : An approach that provides autonomy with self-directed checks and short feedback loops. Currently, there are a few tools that the project can use; but first, the team needs to provide possible solutions to the following: Allow any Wizeliner to contribute. Foster Wizeliners to start documenting as a regular part of their job. Keep information always up to date. Decentralize the governance of documentation. Propose changes across multiple documents or pages. Make contributing accessible for technical users. Make contributing accessible for non-technical users. Find information quickly and intuitively. Collaborate in an async way. Make Wizeliners aware of required contributions.","title":"Problem Statement and Proposal"},{"location":"contributors.explain.docs-as-code.problem-statement-and-proposal.html#vision-of-the-project","text":"To ensure that all Wizeliners base their business and engineering decisions on the same data and documentation sources.","title":"Vision of the Project"},{"location":"contributors.explain.docs-as-code.problem-statement-and-proposal.html#problem-statement","text":"Having a productive, collaborative, and efficient workplace requires having your company's information consolidated. That means knowing what you have, where it is, and who has access to it. In this way, employees can easily access the correct and up-to-date information. The new value that companies provide is to have all the up-to-date information in an SSOT (Single Source of Truth), enabling companies to do business and make effective technical decisions. The amount of content that Wizeline manages across teams, disciplines, academies, communities, projects, clients, and portfolios is growing at a fast rate. This situation brings challenges that often put Wizeline at a disadvantage, negatively impacting operational efficiency and creating barriers for decision-making. Examples of these challenges are: Multiple employees contribute and edit content without awareness of what contributions others have made or are making. Example: Wizeliners are generating content in Google Drive, Confluence, and team sites. Lack of a system that ensures consistency and quality across information created and shared. Example: No governance or agreed rules exist when creating or maintaining documentation. Changes to content do not register, and the systems do not track them; this makes it difficult to track the source of the original document or related documents. Example: Often, you see manual versioning of documents (manual copies or the versioning feature of the document), which causes links in documents to break. Searching for documents across independent and siloed systems becomes complex and time-consuming. Example: Multiple places to store information with no structure exist. Isolated systems can lead people to not knowing specific documents and not having permission to see them. Example: Wizeliners store Google Drive documents in their drive, and there is no standard to store things in a shared drive or structure. Example: Wizeliners store information in Confluence or team Google Sites with low visibility. Content fragments within the organization in multiple sources include: Using presentations as documentation. Creating duplicates of documents with minor adjustments. Informal versioning. Having official information in unofficial systems such as Trello, Notion, Evernote, Mural, Miro, among others. This multiple-source structure causes the following: Duplication of information. Uncertainty about up-to-date or outdated information. Distributed information in various platforms around original documents and current versions. Wizeliners spend too much time following up with coworkers, waiting for a response, and attempting to facilitate collaboration when working with documents. Example: Wizeliners feel that it is faster to ask for information by using Slack regarding documentation rather than spending time trying to find it. Maintenance of the information is restricted for specific people and does not allow feedback on the same platform. Example: Google Drive documents are read-only, and there is no option for commenting or suggesting. These documents require the owner to grant permission. Example: Google Drive documents are in hard-to-find shared drives and are not available to all Wizeliners.","title":"Problem Statement"},{"location":"contributors.explain.docs-as-code.problem-statement-and-proposal.html#solution-proposal","text":"To solve the challenges from the Problem Statement, Wizeline proposes an SSOT strategy with the right tools that allow: Fast access to information for quickly making decisions or complete tasks. Keep information always up to date. Automated administrative tasks. Governance that does not \"gatekeep\" users from accessing, but rather guardrails. Gatekeepers : An approach that often introduces delays with the chain of approval or access requests. Guardrails : An approach that provides autonomy with self-directed checks and short feedback loops. Currently, there are a few tools that the project can use; but first, the team needs to provide possible solutions to the following: Allow any Wizeliner to contribute. Foster Wizeliners to start documenting as a regular part of their job. Keep information always up to date. Decentralize the governance of documentation. Propose changes across multiple documents or pages. Make contributing accessible for technical users. Make contributing accessible for non-technical users. Find information quickly and intuitively. Collaborate in an async way. Make Wizeliners aware of required contributions.","title":"Solution Proposal"},{"location":"contributors.explain.docs-as-code.project-charter.html","text":"Introduction Single source of truth (SSOT) is a concept used to ensure that everyone in an organization bases their business decisions on the same information. As Wizeline continues to grow, this becomes a more significant challenge as the company does not have a clear SSOT or governance to keep it. Wizeline has tried to achieve this on different occasions but has failed to maintain it. As software services companies have adopted the DevOps - Agile methodology to deliver software at high speed, Wizeline's documentation and writing process lack the same ability. The team believes that adopting a git, Docops, and a Docs-like-code approach can help Wizeline achieve a true SSOT. Adopting these practices enables Wizeline members to collaborate using the same or similar tools that Wizeline uses for software such as governance, linting, reviewing, publishing, automation, analytics, notifications, scanning, asynchronous collaboration. Scope The following is the scope of this project: Start with Engineering Practices and Disciplines information. Single source of guides, tutorials, how-to's, explanations, and discussions about why teams do things in Wizeline. Deliver value ASAP, not just tooling or processes. Automate the review, simple governance, and publishing of documents. Demonstrate the MVP Value (have a single SSOT with governance + tooling). Success Criteria The following are the factors that decide if this project is successful in the eyes of the stakeholders: Wizeline Tech Horizontal Orgs (Portfolios is nice to have) have an SSOT for all documentation. Propose a documentation flow similar to the CI/CD flow for software development. Documentation structure favors reader accessibility over content creation accessibility. Reusability of content. Content is searchable. Analytics on documentation. Collaboration is asynchronous to favor remote or different time zone collaboration. Deliverables The following are the deliverables of the project: Must be tangible (for example, a product or service). Signals the completion of a project phase. An important sign for the client. A point for the client to sign-off on project status. Budget This section includes the cost estimate and information about spending authority. The team does not have budget information at this phase of the project. Milestones The milestones that determine that the project is complete are the following: Can be conceptual or tangible. Signals the reaching of a key stage in the project. An important sign for the team. A point for project management to select project goal alignment. The following list comprises the items for completing the project. Pitch Idea to DLs. Get People assigned to solve the problem (if possible, get Wizeliners assigned in PSA). Create a clear value proposition of how Wizeline should address the documentation problem. Document problem statement. Document why SSOT is important. Document why governance is important for a SSOT. Document why maintenance is important for a SSOT. Document why automation and decentralization are important. Document why is it important to decouple reading from writing. Document Structure for the main user (the reader). Document Wizeline Style Guide. Document content creation cycle/process/guidelines. Wizeline Guideline Creation Language style guide. Content Types guide. Content Style guide per type. Document Creation cycle guide. Contribution guide. Versioning guide. Maintenance guide. Review guide. Request for contribution guide. Documentation Structure for readers guide. Documentation Analytics. Document analysis of confluence. Document analysis of github + static site. Decide and commit on how to solve the documentation problem. Set MVP structure. Set MVP Automation to highlight value proposition. Markdownlint. Vale (style guide validation). Flag old content. Nav builder. mkdocs Publishing. Front matter validation. Naming convention validation. CODEOWNER review PRs. Contributions from read only users. Grammar Check. Structure Check. Set MVP with General governance to high-level value proposition (content that is relevant, up to date, useful, traceable, searchable, available, trustful). Set MVP to highlight Accessibility for the reader. Set MVP to highlight Accessibility for the content creator. Constraints and Assumptions what are the project\u2019s known and unknown parameters at this point? Summary of Risks a high-level overview of significant threats to the project\u2019s success Team and Organization The team in charge of this initiative consist of the following people: Team Member Project Role Github Handle Charly Castro Project Manager @charlycastro Laura Mata Site Reliability Engineer (SRE) @lauraehm Elisa Guerrero Site Reliability Engineer (SRE) @hiimwarrior Alan Malag\u00f3n Software Engineer @AlanMalagon Ren\u00e9 Gaspar Software Engineer @renejesusgv Brenda Leyva Technical Writer @BrendaLPhys Gerardo Velasco Technical Writer @geravm Armando Salazar Technical Writer @armando-slzr The following are previous collaborators for the project: Team Member Project Role Github Handle Charly Castro Project Manager @charlycastro Esteban Casta\u00f1o Software Reliability Engineer @estebancrw Saul Ortigoza Software Reliability Engineer @sortigoza Luis Carbajal Software Reliability Engineer @luisc09 Mario Morales Technical Writer @moralesmario Silvia Alvarado Technical Writer @sAlvaradoM Approvals The following list represents the approval levels for the different requirements of the project: IT - Administration and governance on other tools Eng Leads - Commitment and promotion Others (TBD, non-tech users to validate use cases) Notes Drive Issues The following list represents some multiple issues that drive this effort: Visibility: It is hard to find information; links for documentation are non-readable. Governance: There is no way to ensure people follow recommended guidelines or processes, such as: Styles Templates Confidentiality TW publishing process (research, write, review, polish, publish) No way to add metadata Outdated content Automation Google Drive has limited searching capabilities. If someone leaves the company, content automatically gets migrated to the next responsible, but there is a risk of losing this information. Drive Pros Granularity on who can see what (confidentiality). Accessibility, effortless for everyone to add content. Good integration with G Suite. Somewhat good simultaneous collaboration. References and Further Reading Consult the following resources for more information: DocOps Task Force DocOps Purpose and Gitflow Process DocOps Slides DocOps Handbook Success Story of DocOps for Customers Demo Site Demo Site Repo Proposed SSG: mkdocs Success Story from Gitlab YT Video Resources from YT Video Recommendations for Limiting a topic A Possible Doc Structure System Another Good Doc Structure Old Wizeline Docs Repository","title":"Wizeline Docs Project Charter"},{"location":"contributors.explain.docs-as-code.project-charter.html#introduction","text":"Single source of truth (SSOT) is a concept used to ensure that everyone in an organization bases their business decisions on the same information. As Wizeline continues to grow, this becomes a more significant challenge as the company does not have a clear SSOT or governance to keep it. Wizeline has tried to achieve this on different occasions but has failed to maintain it. As software services companies have adopted the DevOps - Agile methodology to deliver software at high speed, Wizeline's documentation and writing process lack the same ability. The team believes that adopting a git, Docops, and a Docs-like-code approach can help Wizeline achieve a true SSOT. Adopting these practices enables Wizeline members to collaborate using the same or similar tools that Wizeline uses for software such as governance, linting, reviewing, publishing, automation, analytics, notifications, scanning, asynchronous collaboration.","title":"Introduction"},{"location":"contributors.explain.docs-as-code.project-charter.html#scope","text":"The following is the scope of this project: Start with Engineering Practices and Disciplines information. Single source of guides, tutorials, how-to's, explanations, and discussions about why teams do things in Wizeline. Deliver value ASAP, not just tooling or processes. Automate the review, simple governance, and publishing of documents. Demonstrate the MVP Value (have a single SSOT with governance + tooling).","title":"Scope"},{"location":"contributors.explain.docs-as-code.project-charter.html#success-criteria","text":"The following are the factors that decide if this project is successful in the eyes of the stakeholders: Wizeline Tech Horizontal Orgs (Portfolios is nice to have) have an SSOT for all documentation. Propose a documentation flow similar to the CI/CD flow for software development. Documentation structure favors reader accessibility over content creation accessibility. Reusability of content. Content is searchable. Analytics on documentation. Collaboration is asynchronous to favor remote or different time zone collaboration.","title":"Success Criteria"},{"location":"contributors.explain.docs-as-code.project-charter.html#deliverables","text":"The following are the deliverables of the project: Must be tangible (for example, a product or service). Signals the completion of a project phase. An important sign for the client. A point for the client to sign-off on project status.","title":"Deliverables"},{"location":"contributors.explain.docs-as-code.project-charter.html#budget","text":"This section includes the cost estimate and information about spending authority. The team does not have budget information at this phase of the project.","title":"Budget"},{"location":"contributors.explain.docs-as-code.project-charter.html#milestones","text":"The milestones that determine that the project is complete are the following: Can be conceptual or tangible. Signals the reaching of a key stage in the project. An important sign for the team. A point for project management to select project goal alignment. The following list comprises the items for completing the project. Pitch Idea to DLs. Get People assigned to solve the problem (if possible, get Wizeliners assigned in PSA). Create a clear value proposition of how Wizeline should address the documentation problem. Document problem statement. Document why SSOT is important. Document why governance is important for a SSOT. Document why maintenance is important for a SSOT. Document why automation and decentralization are important. Document why is it important to decouple reading from writing. Document Structure for the main user (the reader). Document Wizeline Style Guide. Document content creation cycle/process/guidelines. Wizeline Guideline Creation Language style guide. Content Types guide. Content Style guide per type. Document Creation cycle guide. Contribution guide. Versioning guide. Maintenance guide. Review guide. Request for contribution guide. Documentation Structure for readers guide. Documentation Analytics. Document analysis of confluence. Document analysis of github + static site. Decide and commit on how to solve the documentation problem. Set MVP structure. Set MVP Automation to highlight value proposition. Markdownlint. Vale (style guide validation). Flag old content. Nav builder. mkdocs Publishing. Front matter validation. Naming convention validation. CODEOWNER review PRs. Contributions from read only users. Grammar Check. Structure Check. Set MVP with General governance to high-level value proposition (content that is relevant, up to date, useful, traceable, searchable, available, trustful). Set MVP to highlight Accessibility for the reader. Set MVP to highlight Accessibility for the content creator.","title":"Milestones"},{"location":"contributors.explain.docs-as-code.project-charter.html#constraints-and-assumptions","text":"what are the project\u2019s known and unknown parameters at this point?","title":"Constraints and Assumptions"},{"location":"contributors.explain.docs-as-code.project-charter.html#summary-of-risks","text":"a high-level overview of significant threats to the project\u2019s success","title":"Summary of Risks"},{"location":"contributors.explain.docs-as-code.project-charter.html#team-and-organization","text":"The team in charge of this initiative consist of the following people: Team Member Project Role Github Handle Charly Castro Project Manager @charlycastro Laura Mata Site Reliability Engineer (SRE) @lauraehm Elisa Guerrero Site Reliability Engineer (SRE) @hiimwarrior Alan Malag\u00f3n Software Engineer @AlanMalagon Ren\u00e9 Gaspar Software Engineer @renejesusgv Brenda Leyva Technical Writer @BrendaLPhys Gerardo Velasco Technical Writer @geravm Armando Salazar Technical Writer @armando-slzr The following are previous collaborators for the project: Team Member Project Role Github Handle Charly Castro Project Manager @charlycastro Esteban Casta\u00f1o Software Reliability Engineer @estebancrw Saul Ortigoza Software Reliability Engineer @sortigoza Luis Carbajal Software Reliability Engineer @luisc09 Mario Morales Technical Writer @moralesmario Silvia Alvarado Technical Writer @sAlvaradoM","title":"Team and Organization"},{"location":"contributors.explain.docs-as-code.project-charter.html#approvals","text":"The following list represents the approval levels for the different requirements of the project: IT - Administration and governance on other tools Eng Leads - Commitment and promotion Others (TBD, non-tech users to validate use cases)","title":"Approvals"},{"location":"contributors.explain.docs-as-code.project-charter.html#notes","text":"","title":"Notes"},{"location":"contributors.explain.docs-as-code.project-charter.html#drive-issues","text":"The following list represents some multiple issues that drive this effort: Visibility: It is hard to find information; links for documentation are non-readable. Governance: There is no way to ensure people follow recommended guidelines or processes, such as: Styles Templates Confidentiality TW publishing process (research, write, review, polish, publish) No way to add metadata Outdated content Automation Google Drive has limited searching capabilities. If someone leaves the company, content automatically gets migrated to the next responsible, but there is a risk of losing this information.","title":"Drive Issues"},{"location":"contributors.explain.docs-as-code.project-charter.html#drive-pros","text":"Granularity on who can see what (confidentiality). Accessibility, effortless for everyone to add content. Good integration with G Suite. Somewhat good simultaneous collaboration.","title":"Drive Pros"},{"location":"contributors.explain.docs-as-code.project-charter.html#references-and-further-reading","text":"Consult the following resources for more information: DocOps Task Force DocOps Purpose and Gitflow Process DocOps Slides DocOps Handbook Success Story of DocOps for Customers Demo Site Demo Site Repo Proposed SSG: mkdocs Success Story from Gitlab YT Video Resources from YT Video Recommendations for Limiting a topic A Possible Doc Structure System Another Good Doc Structure Old Wizeline Docs Repository","title":"References and Further Reading"},{"location":"contributors.explain.docs-as-code.project-structure.html","text":"Project and Structure Considerations Most documentation grows organically, meaning that there is no structure or a defined standard to follow. To create a standard in the Wizeline Documentation project, the team considers the following: If content creators do not know where to store their content, the structure is deficient. The readers and consumers of the content do not read the complete documentation from start to finish. Therefore, there is no sense in structuring documentation placement for the reader. Readers need value from content. Information is no longer a value; filtering, accessing, granting permissions, having up-to-date information, and guidance are now values that documentation gives. Considering this, the team ensure to maintain a navigation that makes the documentation easy to search. Building and creating new documents is easy, but maintaining and keeping documentation up to date is hard Governance and tooling are essential to maintain structure and documentation quality. Content creators fall under three types of personas: Non-technical : People that are not familiar with git or Markdown. This persona works easier with WYSIWYG (what you see is what you get) editors or a user interface-based platform to contribute to the content. Mid-level technical : People who understand git and Markdown can use tools locally and commit changes. Highly technical : People who understand the git environment entirely and do not need any guidance on tooling. They contribute to the creation of new tools and content. Structure Proposal The following sections include a collection of proposals for the project. Decoupled Navigation from File Location MkDocs requires a yml file for the navigation's configuration. The team opted to create an automation tool that automatically completes this information based on the front matter of the Markdown file. Sections determine the placement of the document in the site's navigation. See the following example: Sample Front Matter File Name : wizedocs.md --- title: Wizeline Docs as Code summary: Wizeline docs as code is an internal documentation tool built using MkDocs. authors: - Mario Morales labels: wizeline, tw sections: - For Everyone --- The following is a sample of the mkdocs.yml configuration file: nav: - For Everyone: - Wizeline Docs as Code: wizedocs.md You can also configure multiple navigation levels. See the following example: Filename : contributors.guidelines.md --- title: Contributor Guidelines summary: A brief description of my document. authors: - Tom labels: wizeline, docops, guidelines sections: - For Contributors/Guidelines --- The following is a sample of the mkdocs.yml configuration file: nav: - For Contributors: - Guidelines: contributors.guidelines.md - For SREs: This practice provides the team with the following benefits: Filename and location decoupled from the navigation. All information, Markdown metadata, and content are in one place. Front matter is not visible to the documentation consumers and enables flexibility for tooling. File Location Document creators must place the Markdown files in the docs/ folder root following a . separated canonical hierarchies . See the following example of a hypothetical hierarchy for a file tree: . \u2514\u2500\u2500 project1/ \u251c\u2500\u2500 project1/paperwork/ \u2502 \u2514\u2500\u2500 project1/paperwork/legal.md \u2514\u2500\u2500 project1/tasks/ \u251c\u2500\u2500 project1/tasks/task1.md \u2514\u2500\u2500 project1/tasks/task2.md Using the same hierarchy for file naming looks like this: . \u251c\u2500\u2500 project1.md \u251c\u2500\u2500 project1.paperwork.md \u251c\u2500\u2500 project1.paperwork.legal.md \u251c\u2500\u2500 project1.tasks.md \u251c\u2500\u2500 project1.tasks.task1.md \u2514\u2500\u2500 project1.tasks.task2.md This standard provides the following benefits: Simpler tooling using glob patterns and validation of naming conventions. Contributors do not need to worry about where to place their files, only for the naming. The tools can help in the review process. Easier refactoring of the name's convention taxonomy if needed in the future. System files prevent duplicates at the moment of creating a file. File Naming, Taxonomy, and Hierarchy Using this document system as a foundation, the team proposes to start the name with the topic (first stub), used as a single pager to let the consumer know where to go next. Here is an example of the Django topic . Here is how Divio also has its one-pager. The second stub must be the type of your document: Learning (Example: Tutorials) User guides (Example: How to guides) Information (Example: Reference guides) Understanding (Example: Explanations or discussions) Here are some file naming examples: Kubernetes : Basic Tutorial kubernetes.tutorial.basic.md Kubernetes : How to Setup a Network Policy kubernetes.how-to.network-policies.md React : How Do React Hooks Work? react.ref.hooks.md Interview Process : interviews.ref.process.md Interview in a 1:1 : interviews.ref.process.1-1-manager-interview.md How Can DocOps Solve Documentation Pain Points? : docops.explain.doc-painpoints.md Wizeline Values : wizeline.explain.values.md Wizeline IT Policy : wizeline.explain.it-policy.md Site Navigation Following the \"The Hitchhiker's Guide to Documentation!\" recommendations, the team proposes a top-level navigation scope per user role. People know what role they have in a team, such as Designers, Leads, QAs, among others. By following this practice, they can quickly narrow the scope of pages in which they are interested. One-Entry Point It's important to have one page with links to every other documentation page. A good example is Django documentation. How it All Looks Together Kubernetes : Basic Tutorial kubernetes.tutorial.basic.md Front Matter : --- title: Kubernetes Basic Tutorial summary: Learn the basics of Kubernetes. authors: - Tom labels: tutorials, kubernetes sections: - For Engineering/Tutorials --- Navigation : nav: - For Engineering: - Tutorials: - Kubernetes Basic Tutorial: kubernetes.tutorial.basic.md","title":"Project Structure"},{"location":"contributors.explain.docs-as-code.project-structure.html#project-and-structure-considerations","text":"Most documentation grows organically, meaning that there is no structure or a defined standard to follow. To create a standard in the Wizeline Documentation project, the team considers the following: If content creators do not know where to store their content, the structure is deficient. The readers and consumers of the content do not read the complete documentation from start to finish. Therefore, there is no sense in structuring documentation placement for the reader. Readers need value from content. Information is no longer a value; filtering, accessing, granting permissions, having up-to-date information, and guidance are now values that documentation gives. Considering this, the team ensure to maintain a navigation that makes the documentation easy to search. Building and creating new documents is easy, but maintaining and keeping documentation up to date is hard Governance and tooling are essential to maintain structure and documentation quality. Content creators fall under three types of personas: Non-technical : People that are not familiar with git or Markdown. This persona works easier with WYSIWYG (what you see is what you get) editors or a user interface-based platform to contribute to the content. Mid-level technical : People who understand git and Markdown can use tools locally and commit changes. Highly technical : People who understand the git environment entirely and do not need any guidance on tooling. They contribute to the creation of new tools and content.","title":"Project and Structure Considerations"},{"location":"contributors.explain.docs-as-code.project-structure.html#structure-proposal","text":"The following sections include a collection of proposals for the project.","title":"Structure Proposal"},{"location":"contributors.explain.docs-as-code.project-structure.html#decoupled-navigation-from-file-location","text":"MkDocs requires a yml file for the navigation's configuration. The team opted to create an automation tool that automatically completes this information based on the front matter of the Markdown file. Sections determine the placement of the document in the site's navigation. See the following example: Sample Front Matter File Name : wizedocs.md --- title: Wizeline Docs as Code summary: Wizeline docs as code is an internal documentation tool built using MkDocs. authors: - Mario Morales labels: wizeline, tw sections: - For Everyone --- The following is a sample of the mkdocs.yml configuration file: nav: - For Everyone: - Wizeline Docs as Code: wizedocs.md You can also configure multiple navigation levels. See the following example: Filename : contributors.guidelines.md --- title: Contributor Guidelines summary: A brief description of my document. authors: - Tom labels: wizeline, docops, guidelines sections: - For Contributors/Guidelines --- The following is a sample of the mkdocs.yml configuration file: nav: - For Contributors: - Guidelines: contributors.guidelines.md - For SREs: This practice provides the team with the following benefits: Filename and location decoupled from the navigation. All information, Markdown metadata, and content are in one place. Front matter is not visible to the documentation consumers and enables flexibility for tooling.","title":"Decoupled Navigation from File Location"},{"location":"contributors.explain.docs-as-code.project-structure.html#file-location","text":"Document creators must place the Markdown files in the docs/ folder root following a . separated canonical hierarchies . See the following example of a hypothetical hierarchy for a file tree: . \u2514\u2500\u2500 project1/ \u251c\u2500\u2500 project1/paperwork/ \u2502 \u2514\u2500\u2500 project1/paperwork/legal.md \u2514\u2500\u2500 project1/tasks/ \u251c\u2500\u2500 project1/tasks/task1.md \u2514\u2500\u2500 project1/tasks/task2.md Using the same hierarchy for file naming looks like this: . \u251c\u2500\u2500 project1.md \u251c\u2500\u2500 project1.paperwork.md \u251c\u2500\u2500 project1.paperwork.legal.md \u251c\u2500\u2500 project1.tasks.md \u251c\u2500\u2500 project1.tasks.task1.md \u2514\u2500\u2500 project1.tasks.task2.md This standard provides the following benefits: Simpler tooling using glob patterns and validation of naming conventions. Contributors do not need to worry about where to place their files, only for the naming. The tools can help in the review process. Easier refactoring of the name's convention taxonomy if needed in the future. System files prevent duplicates at the moment of creating a file.","title":"File Location"},{"location":"contributors.explain.docs-as-code.project-structure.html#file-naming-taxonomy-and-hierarchy","text":"Using this document system as a foundation, the team proposes to start the name with the topic (first stub), used as a single pager to let the consumer know where to go next. Here is an example of the Django topic . Here is how Divio also has its one-pager. The second stub must be the type of your document: Learning (Example: Tutorials) User guides (Example: How to guides) Information (Example: Reference guides) Understanding (Example: Explanations or discussions) Here are some file naming examples: Kubernetes : Basic Tutorial kubernetes.tutorial.basic.md Kubernetes : How to Setup a Network Policy kubernetes.how-to.network-policies.md React : How Do React Hooks Work? react.ref.hooks.md Interview Process : interviews.ref.process.md Interview in a 1:1 : interviews.ref.process.1-1-manager-interview.md How Can DocOps Solve Documentation Pain Points? : docops.explain.doc-painpoints.md Wizeline Values : wizeline.explain.values.md Wizeline IT Policy : wizeline.explain.it-policy.md","title":"File Naming, Taxonomy, and Hierarchy"},{"location":"contributors.explain.docs-as-code.project-structure.html#site-navigation","text":"Following the \"The Hitchhiker's Guide to Documentation!\" recommendations, the team proposes a top-level navigation scope per user role. People know what role they have in a team, such as Designers, Leads, QAs, among others. By following this practice, they can quickly narrow the scope of pages in which they are interested.","title":"Site Navigation"},{"location":"contributors.explain.docs-as-code.project-structure.html#one-entry-point","text":"It's important to have one page with links to every other documentation page. A good example is Django documentation.","title":"One-Entry Point"},{"location":"contributors.explain.docs-as-code.project-structure.html#how-it-all-looks-together","text":"Kubernetes : Basic Tutorial kubernetes.tutorial.basic.md Front Matter : --- title: Kubernetes Basic Tutorial summary: Learn the basics of Kubernetes. authors: - Tom labels: tutorials, kubernetes sections: - For Engineering/Tutorials --- Navigation : nav: - For Engineering: - Tutorials: - Kubernetes Basic Tutorial: kubernetes.tutorial.basic.md","title":"How it All Looks Together"},{"location":"contributors.explain.mermaid.configuration.html","text":"Mermaid Integration and Configuration with MkDocs Installation The wizedocs repository has all the tools pre-installed on the site. The following list contains the installation requirements: MkDocs Material to run MkDocs Superfences extension. Included in the Material theme for MkDocs. MkDocs Configuration To configure MkDocs, add the following lines to your mkdocs.yml file: extra_javascript : - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js - extra-javascript/mermaid-custom-calls.js markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_div_format The extra_javascript property retrieves the library MermaidJS remotely, which transforms text to diagrams. The markdown_extensions property enables the use of extensions. You must configure the Custom Fences extension, this is part of Super Fences from PyMdown Extensions . This extension is responsible of transforming the Markdown code blocks with Mermaid syntax into diagrams. The Mermaid properties do the following: name : Sets the keyword of the custom fence, it works like defining a programming language to a code block. class : Sets the text that is going to be added as a class attribute within the HTML element you must replace with the code block. format : Sets the HTML element you must replace with the code block. For more info see Custom Fences and Material for MkDocs Superfences This is an example of what happens in the background: Custom Fences turns a Markdown file: ```mermaid <-- keyword of the custom fence your code here ``` Remember that code blocks in .md files start and end with ``` or ~~~. Into this: < div class = \"mermaid\" > </ div > JavaScript Configuration Mermaid renders when the browser generates the load event after refreshing the site. MkDocs alse creates the load event when going to the site. If an issue happens, you must create the mermaid-custom-calls file. mermaid-custom-calls includes a JavaScript setInterval() function that searches for browser route changes twice every second. When the route changes, it calls mermaid.init(); making Mermaid to render the diagrams again, instead of waiting for the next load event rendering the diagrams correctly placed. Creating Diagrams The configuration enables the diagram rendering within the project. Every contributor can write text using Mermaid syntax: ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` See the result in a development enviroment when booting the development server and the deployed Wizedocs site: graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"Mermaid Integration and Configuration with MkDocs"},{"location":"contributors.explain.mermaid.configuration.html#mermaid-integration-and-configuration-with-mkdocs","text":"","title":"Mermaid Integration and Configuration with MkDocs"},{"location":"contributors.explain.mermaid.configuration.html#installation","text":"The wizedocs repository has all the tools pre-installed on the site. The following list contains the installation requirements: MkDocs Material to run MkDocs Superfences extension. Included in the Material theme for MkDocs.","title":"Installation"},{"location":"contributors.explain.mermaid.configuration.html#mkdocs-configuration","text":"To configure MkDocs, add the following lines to your mkdocs.yml file: extra_javascript : - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js - extra-javascript/mermaid-custom-calls.js markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_div_format The extra_javascript property retrieves the library MermaidJS remotely, which transforms text to diagrams. The markdown_extensions property enables the use of extensions. You must configure the Custom Fences extension, this is part of Super Fences from PyMdown Extensions . This extension is responsible of transforming the Markdown code blocks with Mermaid syntax into diagrams. The Mermaid properties do the following: name : Sets the keyword of the custom fence, it works like defining a programming language to a code block. class : Sets the text that is going to be added as a class attribute within the HTML element you must replace with the code block. format : Sets the HTML element you must replace with the code block. For more info see Custom Fences and Material for MkDocs Superfences This is an example of what happens in the background: Custom Fences turns a Markdown file: ```mermaid <-- keyword of the custom fence your code here ``` Remember that code blocks in .md files start and end with ``` or ~~~. Into this: < div class = \"mermaid\" > </ div >","title":"MkDocs Configuration"},{"location":"contributors.explain.mermaid.configuration.html#javascript-configuration","text":"Mermaid renders when the browser generates the load event after refreshing the site. MkDocs alse creates the load event when going to the site. If an issue happens, you must create the mermaid-custom-calls file. mermaid-custom-calls includes a JavaScript setInterval() function that searches for browser route changes twice every second. When the route changes, it calls mermaid.init(); making Mermaid to render the diagrams again, instead of waiting for the next load event rendering the diagrams correctly placed.","title":"JavaScript Configuration"},{"location":"contributors.explain.mermaid.configuration.html#creating-diagrams","text":"The configuration enables the diagram rendering within the project. Every contributor can write text using Mermaid syntax: ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` See the result in a development enviroment when booting the development server and the deployed Wizedocs site: graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"Creating Diagrams"},{"location":"contributors.index.html","text":"For Contributors Note : This section is under construction. This section contains the information that you need to contribute to the Wizeline Knowledge Center. Getting Started Set up Wizeline Docs as Code . Follow the content creation guidelines . Get familiar with Markdown with this Markdown guide for contributors . Getting Help For additional support go to the slack channel #wizeline-docs-as-code . Contents The resources in this section are distributed in the following topics: Content Creation Guides Content Creation Guidelines and Resources Wizeline Document Types Guide Style Guide for Contributors Writing for Readers Documentation Maintenance Guide Markdown Guide for Contributors Tools and Resources Wizeline Docs as Code Diagrams Guide for Contributors Mermaid Integration and Configuration with MkDocs Using GitHub Actions Reference these documents to ensure that your content follows Wizeline's collaboration rules and guidelines.","title":"Contributors Home Page"},{"location":"contributors.index.html#for-contributors","text":"Note : This section is under construction. This section contains the information that you need to contribute to the Wizeline Knowledge Center.","title":"For Contributors"},{"location":"contributors.index.html#getting-started","text":"Set up Wizeline Docs as Code . Follow the content creation guidelines . Get familiar with Markdown with this Markdown guide for contributors .","title":"Getting Started"},{"location":"contributors.index.html#getting-help","text":"For additional support go to the slack channel #wizeline-docs-as-code .","title":"Getting Help"},{"location":"contributors.index.html#contents","text":"The resources in this section are distributed in the following topics:","title":"Contents"},{"location":"contributors.index.html#content-creation-guides","text":"Content Creation Guidelines and Resources Wizeline Document Types Guide Style Guide for Contributors Writing for Readers Documentation Maintenance Guide Markdown Guide for Contributors","title":"Content Creation Guides"},{"location":"contributors.index.html#tools-and-resources","text":"Wizeline Docs as Code Diagrams Guide for Contributors Mermaid Integration and Configuration with MkDocs Using GitHub Actions Reference these documents to ensure that your content follows Wizeline's collaboration rules and guidelines.","title":"Tools and Resources"},{"location":"contributors.maintenance-guide.html","text":"Documentation Maintenance Guide Having a complete and accurate documentation is an ongoing effort. This continuous improvement process consists of three main steps: Assess the state of your documentation. Determine a course of action. Implement the strategy. The following sections provide details about each step. Assess the State of Your Documentation Your documents will need attention for three main reasons: A documentation gap : Documentation that the organization needs to complete tasks and make decisions but does not exist. Deprecated content : Content that is in use but requires changes and updates to stay relevant and helpful. Obsolete content : Documents that are no longer in use. You can determine a course of action depending on which of these three situations you detect. Determine a Course of Action Your maintenance strategy is supported by one of four actions: Creating Updating Deleting Archiving The following sections take you through each of these strategies. Creating a Document You must create a document under the following circumstances: When creating a new process. When implementing a new tool. When sharing lessons learned. After discovering a documentation gap when looking for information. To create effective documentation, ensure that you are following the best practices put in place by the organization and keep in mind that it must be a team effort. Updating a Document You must update a document when it contains deprecated content, which occurs under the following circumstances: When a process changes. When a tool changes. After organization-wide changes. When a document exists but is missing details or a specific case. When links and references are not working properly. Outdated information can create performance issues and confusion. Deleting a Document You must delete a document when it contains information that is no longer in use. Before deleting any content, make sure it is not be relevant or helpful under any present or future circumstances. Archiving a Document You must archive a document when the content is no longer in use but the organization can reference them in the future. Implement the Strategy At this point you have assessed the state of your documentation and identified the maintenance strategy you need to implement. For a successful implementation consider the following: Make it a team effort. Align your documentation efforts with the organization-wide strategy. Communicate the results and make the documents available in an official internal platform. This is a simple and iterative process that can help you maintain a high quality internal documentation.","title":"Documentation Maintenance Guide"},{"location":"contributors.maintenance-guide.html#documentation-maintenance-guide","text":"Having a complete and accurate documentation is an ongoing effort. This continuous improvement process consists of three main steps: Assess the state of your documentation. Determine a course of action. Implement the strategy. The following sections provide details about each step.","title":"Documentation Maintenance Guide"},{"location":"contributors.maintenance-guide.html#assess-the-state-of-your-documentation","text":"Your documents will need attention for three main reasons: A documentation gap : Documentation that the organization needs to complete tasks and make decisions but does not exist. Deprecated content : Content that is in use but requires changes and updates to stay relevant and helpful. Obsolete content : Documents that are no longer in use. You can determine a course of action depending on which of these three situations you detect.","title":"Assess the State of Your Documentation"},{"location":"contributors.maintenance-guide.html#determine-a-course-of-action","text":"Your maintenance strategy is supported by one of four actions: Creating Updating Deleting Archiving The following sections take you through each of these strategies.","title":"Determine a Course of Action"},{"location":"contributors.maintenance-guide.html#creating-a-document","text":"You must create a document under the following circumstances: When creating a new process. When implementing a new tool. When sharing lessons learned. After discovering a documentation gap when looking for information. To create effective documentation, ensure that you are following the best practices put in place by the organization and keep in mind that it must be a team effort.","title":"Creating a Document"},{"location":"contributors.maintenance-guide.html#updating-a-document","text":"You must update a document when it contains deprecated content, which occurs under the following circumstances: When a process changes. When a tool changes. After organization-wide changes. When a document exists but is missing details or a specific case. When links and references are not working properly. Outdated information can create performance issues and confusion.","title":"Updating a Document"},{"location":"contributors.maintenance-guide.html#deleting-a-document","text":"You must delete a document when it contains information that is no longer in use. Before deleting any content, make sure it is not be relevant or helpful under any present or future circumstances.","title":"Deleting a Document"},{"location":"contributors.maintenance-guide.html#archiving-a-document","text":"You must archive a document when the content is no longer in use but the organization can reference them in the future.","title":"Archiving a Document"},{"location":"contributors.maintenance-guide.html#implement-the-strategy","text":"At this point you have assessed the state of your documentation and identified the maintenance strategy you need to implement. For a successful implementation consider the following: Make it a team effort. Align your documentation efforts with the organization-wide strategy. Communicate the results and make the documents available in an official internal platform. This is a simple and iterative process that can help you maintain a high quality internal documentation.","title":"Implement the Strategy"},{"location":"contributors.reference.using-github-actions.html","text":"Using GitHub Actions This document describes the best practices to consider when working with GitHub Actions (GHA). Audience The main objective of this document is to help the team share the importance of working with GitHub Actions. This guide is for anyone who wants to implement any automation idea that can solve a maintenance task or guide a user to complete a task. Benefits of GitHub Actions GitHub Actions facilitates automating all your software workflows; it helps you build, test, and deploy applications. You can also use it to automate other tasks common to your developer workflows: triaging and managing issues, automating releases, and collaborating with your user base. This document can be modified depending of the needs of the project. Keep Actions Minimal Developers want their code to be easy to read and maintain. Follow these practices to write better code: Workflows must have at least one job Each job must have a unique identifier Start job identifiers with a letter or an underscore Avoid installing unnecessary dependencies. Use Github caching to save data and restore it later. The longer an action takes to set up and run, the more time you spend waiting. Separate actions in different files if they are not related to each other. Limit Environment Variables Declare environment variables with the narrowest possible scope; this prevents polluting the global environment context, making it easier to know the process in any step or job. Keep Your Secrets Safe Use encrypted secrets when you work with sensitive information in Github Actions. For more security tips for GHA, go to the Github Actions website.","title":"Using GitHub Actions"},{"location":"contributors.reference.using-github-actions.html#using-github-actions","text":"This document describes the best practices to consider when working with GitHub Actions (GHA).","title":"Using GitHub Actions"},{"location":"contributors.reference.using-github-actions.html#audience","text":"The main objective of this document is to help the team share the importance of working with GitHub Actions. This guide is for anyone who wants to implement any automation idea that can solve a maintenance task or guide a user to complete a task.","title":"Audience"},{"location":"contributors.reference.using-github-actions.html#benefits-of-github-actions","text":"GitHub Actions facilitates automating all your software workflows; it helps you build, test, and deploy applications. You can also use it to automate other tasks common to your developer workflows: triaging and managing issues, automating releases, and collaborating with your user base. This document can be modified depending of the needs of the project.","title":"Benefits of GitHub Actions"},{"location":"contributors.reference.using-github-actions.html#keep-actions-minimal","text":"Developers want their code to be easy to read and maintain. Follow these practices to write better code: Workflows must have at least one job Each job must have a unique identifier Start job identifiers with a letter or an underscore Avoid installing unnecessary dependencies. Use Github caching to save data and restore it later. The longer an action takes to set up and run, the more time you spend waiting. Separate actions in different files if they are not related to each other.","title":"Keep Actions Minimal"},{"location":"contributors.reference.using-github-actions.html#limit-environment-variables","text":"Declare environment variables with the narrowest possible scope; this prevents polluting the global environment context, making it easier to know the process in any step or job.","title":"Limit Environment Variables"},{"location":"contributors.reference.using-github-actions.html#keep-your-secrets-safe","text":"Use encrypted secrets when you work with sensitive information in Github Actions. For more security tips for GHA, go to the Github Actions website.","title":"Keep Your Secrets Safe"},{"location":"contributors.tools.theme-overriding.html","text":"Theme Overriding MkDocs enables the user to change and override not just the CSS stylesheets or JavaScript; you can also override your template's structure. See the Customizing Your Theme section from the MkDocs official documentation. As the Wizeline Docs as Code project utilizes the Material theme for MkDocs, consult the Customization section from their official repository. This guide helps you to customize the components that the project uses throughout the site. To add custom HTML, CSS, and JavaScript for using it exclusively on a specific document or page, add it to the same document's contents. MkDocs supports HTML natively without any additional configuration, enabling you to use <style> and <script> tags. Here's an example: This goes inside the-page-you-are-creating.md --------------------------------------------- < style > h1 { color : red ;} p { color : blue ;} </ style > < script src = \"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\" ></ script > < script > mermaid . init (); // <-- you can call objects that come from libraries. document . getElementById ( \"demo\" ). innerHTML = \"Hello JavaScript!\" ; </ script > < h1 > Title in red </ h1 > < p > Paragraph in blue </ p > The following sections detail the steps to modify the frontend of the site. CSS You can create a class that can be called anywhere on the site as long as you configure an extra_css property in the mkdocs.yml that includes its location . You can reference more than one file and a different directory; see the following example: extra_css : - stylesheets/extra.css - nav-styles/nav-item.css Your project needs to have both directories and files to work. Based on the example above, this is how the structure of your project folder must be. The directories of stylesheets must be inside the docs folder. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2502 \u2514\u2500 nav-styles/ \u2502 \u2514\u2500 nav-item.css \u2514\u2500 mkdocs.yml JavaScript To add JavaScript to the site, follow the same steps from the CSS section. Here is an example of implementing JavaScript: extra_javascript : - javascripts/extra.js . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml HTML You can replace MkDocs and Material templates entirely. Consult the following resources for more information: Developing Themes for MkDocs Extending the Theme for Material MkDocs Templates are written in simple HTML using the help of Jinja to replace variables with other values. Consult Jinja's Documentation for more information. Two ways of customizing templates exist: Overriding Complete Files (AKA Partials) To enable this option, add a custom_dir property that contains the files to override in the mkdocs.yml file. Add this property with the directory's name under docs as a sub-property of theme . See the following example: theme : name : material custom_dir : overrides This directory must follow the structure of the base MkDocs theme: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404.html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page You can replace any file mirroring its directory place. For example, to change the nav.html file, create the file that will replace the original under /overrides/partials/nav.html . It doesn't matter that it is just one or multiple files; MkDocs will replace only the elements found under overrides , leaving the rest untouched. Overriding Blocks This option will save you a lot of work because you will override just parts instead of complete files. To enable this option, you also need to set the override property in the mkdocs.yml as we did in the Partials section. The difference this time is that we are just going to create one HTML file under this directory. The filename is main.html, and the layout is as follows: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml After this, you can start writing custom components using the Jinja syntax. Here is the complete list of template variables that MkDocs uses. Also, consult Template Blocks for the Material theme if you are looking for specific elements. Retaking the example where we change the nav item, write the following in main.html : {% extends \"base.html\" %} <!-- this line is important for keeping all the files and HTML as if there were no changes.--> {% block site_nav %} <!-- template block from Material for MkDocs --> <!-- custom HTML to add to this block, also with extra_css --> < h1 class = \"customNavItem pointer\" > Extra nav item - FIXED </ h1 > {{ super() }} <!-- template variable from MkDocs to get the nav list --> {% endblock %}","title":"Theme Overriding"},{"location":"contributors.tools.theme-overriding.html#theme-overriding","text":"MkDocs enables the user to change and override not just the CSS stylesheets or JavaScript; you can also override your template's structure. See the Customizing Your Theme section from the MkDocs official documentation. As the Wizeline Docs as Code project utilizes the Material theme for MkDocs, consult the Customization section from their official repository. This guide helps you to customize the components that the project uses throughout the site. To add custom HTML, CSS, and JavaScript for using it exclusively on a specific document or page, add it to the same document's contents. MkDocs supports HTML natively without any additional configuration, enabling you to use <style> and <script> tags. Here's an example: This goes inside the-page-you-are-creating.md --------------------------------------------- < style > h1 { color : red ;} p { color : blue ;} </ style > < script src = \"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\" ></ script > < script > mermaid . init (); // <-- you can call objects that come from libraries. document . getElementById ( \"demo\" ). innerHTML = \"Hello JavaScript!\" ; </ script > < h1 > Title in red </ h1 > < p > Paragraph in blue </ p > The following sections detail the steps to modify the frontend of the site.","title":"Theme Overriding"},{"location":"contributors.tools.theme-overriding.html#css","text":"You can create a class that can be called anywhere on the site as long as you configure an extra_css property in the mkdocs.yml that includes its location . You can reference more than one file and a different directory; see the following example: extra_css : - stylesheets/extra.css - nav-styles/nav-item.css Your project needs to have both directories and files to work. Based on the example above, this is how the structure of your project folder must be. The directories of stylesheets must be inside the docs folder. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2502 \u2514\u2500 nav-styles/ \u2502 \u2514\u2500 nav-item.css \u2514\u2500 mkdocs.yml","title":"CSS"},{"location":"contributors.tools.theme-overriding.html#javascript","text":"To add JavaScript to the site, follow the same steps from the CSS section. Here is an example of implementing JavaScript: extra_javascript : - javascripts/extra.js . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml","title":"JavaScript"},{"location":"contributors.tools.theme-overriding.html#html","text":"You can replace MkDocs and Material templates entirely. Consult the following resources for more information: Developing Themes for MkDocs Extending the Theme for Material MkDocs Templates are written in simple HTML using the help of Jinja to replace variables with other values. Consult Jinja's Documentation for more information. Two ways of customizing templates exist:","title":"HTML"},{"location":"contributors.tools.theme-overriding.html#overriding-complete-files-aka-partials","text":"To enable this option, add a custom_dir property that contains the files to override in the mkdocs.yml file. Add this property with the directory's name under docs as a sub-property of theme . See the following example: theme : name : material custom_dir : overrides This directory must follow the structure of the base MkDocs theme: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404.html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page You can replace any file mirroring its directory place. For example, to change the nav.html file, create the file that will replace the original under /overrides/partials/nav.html . It doesn't matter that it is just one or multiple files; MkDocs will replace only the elements found under overrides , leaving the rest untouched.","title":"Overriding Complete Files (AKA Partials)"},{"location":"contributors.tools.theme-overriding.html#overriding-blocks","text":"This option will save you a lot of work because you will override just parts instead of complete files. To enable this option, you also need to set the override property in the mkdocs.yml as we did in the Partials section. The difference this time is that we are just going to create one HTML file under this directory. The filename is main.html, and the layout is as follows: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml After this, you can start writing custom components using the Jinja syntax. Here is the complete list of template variables that MkDocs uses. Also, consult Template Blocks for the Material theme if you are looking for specific elements. Retaking the example where we change the nav item, write the following in main.html : {% extends \"base.html\" %} <!-- this line is important for keeping all the files and HTML as if there were no changes.--> {% block site_nav %} <!-- template block from Material for MkDocs --> <!-- custom HTML to add to this block, also with extra_css --> < h1 class = \"customNavItem pointer\" > Extra nav item - FIXED </ h1 > {{ super() }} <!-- template variable from MkDocs to get the nav list --> {% endblock %}","title":"Overriding Blocks"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html","text":"As part of the Docs as Code solution, Wizeline enforces standardizing the documentation creation process and publishing flows. This document aims to help Wizeline members with multiple tips on writing documentation depending on their audience, help them deliver high-quality content, and enables them to publish using the best available resources. Documentation Culture Wizeline relies upon creating excellent quality documentation for projects. The Docs as Code project aims to replicate that documentation culture and reflect it in internal assets for the company and for every deliverable that Wizeline provides to customers. Wizeline considers documentation an essential part of the process and not an additional \"nice to have\" resource. For this reason, this document includes practices that help you create more concise, meaningful, and helpful content in your documents. Members from Wizeline create documentation regularly. To consult the types of documents that Wizeline creates, refer to the Wizeline Document Types Guide . Creating Content The content of your documents can define the quality of a resource, which can be a product, a piece of software, a presentation, a demo, among other assets. Consider the following key aspects when creating content: Make your content valuable. Use the correct language. Take advantage of text formatting. Be inclusive in your writing. The Wizeline Docs as Code project has created the Style Guide for Contributors to help you follow the best practices when creating content. Writing Process The following sections detail the content creation process phases that help you preparing your documents and delivering high-quality assets that are helpful for the consumers of your content. Step 1: Research and Planning Research and planning are the initial parts of the writing process. This first phase enables you to set the foundation for the scope of your document. It also helps you to define how to deliver an accurate and helpful piece of content. In this phase, you define your document's key aspects such as: Scope Type of Document Audience Style and Tone Step 2: Prepare Your Content Now that you have a solid idea of the objectives and style of your document, it is time to prepare and organize the contents for your deliverable. This phase includes gathering information from the research phase of the process. You can collect your research in a central place and start outlining the structure of your document, which helps you organize your ideas. When preparing your content, consider the following: Place your information (data, links, notes, ideas, and references) in your workspace. Brainstorm complementary ideas for supporting your content. Draft an outline of your document or a general structure depending on your type of asset. The structure of your document and your outline depend on your type of asset. To help you define this, refer to the Wizeline Document Types Guide of this site. Wizeline recommends you use authorized mind mapping tools to help you organize your content. Step 3: Write Your Document Now that you have prepared the contents of your draft, it is time to write your document. Depending on the type of document you are creating, use the tool that better fits your needs. Important : Keep in mind that drafting is an iterative process. Ensure that the tools you use enable you to collaborate and modify your content easily. Step 4: Review Your Document Wizeline relies on revising content for delivering high-quality documentation. For this reason, Wizeline's Technical Writing team follows review practices that you can apply to ensure delivering the most accurate and valuable documentation to the readers. After drafting your document, give yourself a minimum of two hours, and then return to perform a self-review. This review process consists of the following: Verify your document's structure and ensure that you are presenting the most meaningful and easy-to-read manner for your audience. Focus on the following actions: Analyze your word choice. Ensure style and structure. Analyze voice and tone. Evaluate the quality of your content and perform the following actions: Check for grammar errors. Correct typos. Fix writing mistakes. Test your document assets and focus on the following: Test links. Reproduce steps. Verify object names. Check labels from tables and images. Review media sources (screenshots, videos, etc.). Ask for a peer review from another member of your team or a Subject Matter Expert (SME). Request for direct and actionable feedback and suggestions to correct and improve your content. Adjust and modify your content according to your findings, your improvement ideas, and the feedback you received from your peers. When you finish the review process, proceed to the following phase. Step 5: Publish Your Document After adjusting your content and ensuring that your document's first final version does not need additional changes, publish and release your document through Wizeline's authorized platforms. Note : When delivering a formal document, attaching the link to the document in an email for stakeholder exposure is a good practice. References and Further Reading Consult the following resources for more information on Writing Guidelines: Document Writing, Step by Step (with Templates) - Mind Meister 5 Steps to Create Technical Documentation That\u2019s (Actually) Helpful - Planio Blog","title":"Content Creation Guidelines and Resources"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#documentation-culture","text":"Wizeline relies upon creating excellent quality documentation for projects. The Docs as Code project aims to replicate that documentation culture and reflect it in internal assets for the company and for every deliverable that Wizeline provides to customers. Wizeline considers documentation an essential part of the process and not an additional \"nice to have\" resource. For this reason, this document includes practices that help you create more concise, meaningful, and helpful content in your documents. Members from Wizeline create documentation regularly. To consult the types of documents that Wizeline creates, refer to the Wizeline Document Types Guide .","title":"Documentation Culture"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#creating-content","text":"The content of your documents can define the quality of a resource, which can be a product, a piece of software, a presentation, a demo, among other assets. Consider the following key aspects when creating content: Make your content valuable. Use the correct language. Take advantage of text formatting. Be inclusive in your writing. The Wizeline Docs as Code project has created the Style Guide for Contributors to help you follow the best practices when creating content.","title":"Creating Content"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#writing-process","text":"The following sections detail the content creation process phases that help you preparing your documents and delivering high-quality assets that are helpful for the consumers of your content.","title":"Writing Process"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#step-1-research-and-planning","text":"Research and planning are the initial parts of the writing process. This first phase enables you to set the foundation for the scope of your document. It also helps you to define how to deliver an accurate and helpful piece of content. In this phase, you define your document's key aspects such as: Scope Type of Document Audience Style and Tone","title":"Step 1: Research and Planning"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#step-2-prepare-your-content","text":"Now that you have a solid idea of the objectives and style of your document, it is time to prepare and organize the contents for your deliverable. This phase includes gathering information from the research phase of the process. You can collect your research in a central place and start outlining the structure of your document, which helps you organize your ideas. When preparing your content, consider the following: Place your information (data, links, notes, ideas, and references) in your workspace. Brainstorm complementary ideas for supporting your content. Draft an outline of your document or a general structure depending on your type of asset. The structure of your document and your outline depend on your type of asset. To help you define this, refer to the Wizeline Document Types Guide of this site. Wizeline recommends you use authorized mind mapping tools to help you organize your content.","title":"Step 2: Prepare Your Content"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#step-3-write-your-document","text":"Now that you have prepared the contents of your draft, it is time to write your document. Depending on the type of document you are creating, use the tool that better fits your needs. Important : Keep in mind that drafting is an iterative process. Ensure that the tools you use enable you to collaborate and modify your content easily.","title":"Step 3: Write Your Document"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#step-4-review-your-document","text":"Wizeline relies on revising content for delivering high-quality documentation. For this reason, Wizeline's Technical Writing team follows review practices that you can apply to ensure delivering the most accurate and valuable documentation to the readers. After drafting your document, give yourself a minimum of two hours, and then return to perform a self-review. This review process consists of the following: Verify your document's structure and ensure that you are presenting the most meaningful and easy-to-read manner for your audience. Focus on the following actions: Analyze your word choice. Ensure style and structure. Analyze voice and tone. Evaluate the quality of your content and perform the following actions: Check for grammar errors. Correct typos. Fix writing mistakes. Test your document assets and focus on the following: Test links. Reproduce steps. Verify object names. Check labels from tables and images. Review media sources (screenshots, videos, etc.). Ask for a peer review from another member of your team or a Subject Matter Expert (SME). Request for direct and actionable feedback and suggestions to correct and improve your content. Adjust and modify your content according to your findings, your improvement ideas, and the feedback you received from your peers. When you finish the review process, proceed to the following phase.","title":"Step 4: Review Your Document"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#step-5-publish-your-document","text":"After adjusting your content and ensuring that your document's first final version does not need additional changes, publish and release your document through Wizeline's authorized platforms. Note : When delivering a formal document, attaching the link to the document in an email for stakeholder exposure is a good practice.","title":"Step 5: Publish Your Document"},{"location":"contributors.tutorials.content-creation-guidelines-and-resources.html#references-and-further-reading","text":"Consult the following resources for more information on Writing Guidelines: Document Writing, Step by Step (with Templates) - Mind Meister 5 Steps to Create Technical Documentation That\u2019s (Actually) Helpful - Planio Blog","title":"References and Further Reading"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html","text":"Diagrams Guide for Contributors MermaidJS is the library we use to transform text into cool-looking diagrams. It supports different types of diagrams; the list is here, and every item has a link to the official library's documentation. Flowcharts Sequence Class State Entity Relationship User Journey Gantt Pie Chart Requirement This document is not an extensive guide on creating complex diagrams but a reference overview of what you can do using Mermaid in Wizedocs. We hope Wizeliners can get the best out of the library. Turn Text into Diagrams To start creating diagrams, you need to define a block of lines that contains the diagram. The symbols we use for this are the triple backticks \u2192 ``` or, the triple tildes \u2192 ~~~ . Ensure to wrap with triple backticks or tildes at the start and at the end and write either mermaid or diagram . For example: Note : The empty line is where you write your mermaid-syntaxed text. ```mermaid ``` Flowchart Diagrams To use flowchart diagrams, use the keyword graph . This creates a vertical-oriented flowchart, but you can also create a horizontal-oriented one, by simply adding the letters LR , which stand for Left to Right . Then you can define nodes and their flow with different keywords or symbols. For example: ```diagram graph LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` The previous snippet creates the following: graph LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Sequence Diagrams Use the sequenceDiagram keyword for this kind of diagram, which renders the next lines as sequence diagrams. You can also change the type of arrow for each interaction. To see the different types of arrows available, see the Messages section from the Mermaid documentation. ```mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` The previous code results in the following: sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Class diagrams Use the classDiagram keyword for this kind of diagram. You can write down classes, their attributes, methods, and relations. You can also configure their visibility settings. Consult the Visibility section from the Mermaid documentation. ```mermaid classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` The previous snippet results in the following: classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Entity Relationship Diagrams To enable these diagrams, use the erDiagram keyword. Consult the relationship syntax for these diagrams in the Relationship Diagram section from the Mermaid documentation. ```mermaid erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } ``` The previous snippet results in the following: erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age }","title":"Diagrams Guide for Contributors"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#diagrams-guide-for-contributors","text":"MermaidJS is the library we use to transform text into cool-looking diagrams. It supports different types of diagrams; the list is here, and every item has a link to the official library's documentation. Flowcharts Sequence Class State Entity Relationship User Journey Gantt Pie Chart Requirement This document is not an extensive guide on creating complex diagrams but a reference overview of what you can do using Mermaid in Wizedocs. We hope Wizeliners can get the best out of the library.","title":"Diagrams Guide for Contributors"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#turn-text-into-diagrams","text":"To start creating diagrams, you need to define a block of lines that contains the diagram. The symbols we use for this are the triple backticks \u2192 ``` or, the triple tildes \u2192 ~~~ . Ensure to wrap with triple backticks or tildes at the start and at the end and write either mermaid or diagram . For example: Note : The empty line is where you write your mermaid-syntaxed text. ```mermaid ```","title":"Turn Text into Diagrams"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#flowchart-diagrams","text":"To use flowchart diagrams, use the keyword graph . This creates a vertical-oriented flowchart, but you can also create a horizontal-oriented one, by simply adding the letters LR , which stand for Left to Right . Then you can define nodes and their flow with different keywords or symbols. For example: ```diagram graph LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` The previous snippet creates the following: graph LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"Flowchart Diagrams"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#sequence-diagrams","text":"Use the sequenceDiagram keyword for this kind of diagram, which renders the next lines as sequence diagrams. You can also change the type of arrow for each interaction. To see the different types of arrows available, see the Messages section from the Mermaid documentation. ```mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` The previous code results in the following: sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Sequence Diagrams"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#class-diagrams","text":"Use the classDiagram keyword for this kind of diagram. You can write down classes, their attributes, methods, and relations. You can also configure their visibility settings. Consult the Visibility section from the Mermaid documentation. ```mermaid classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` The previous snippet results in the following: classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }","title":"Class diagrams"},{"location":"contributors.tutorials.diagrams-guide-for-contributors.html#entity-relationship-diagrams","text":"To enable these diagrams, use the erDiagram keyword. Consult the relationship syntax for these diagrams in the Relationship Diagram section from the Mermaid documentation. ```mermaid erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } ``` The previous snippet results in the following: erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age }","title":"Entity Relationship Diagrams"},{"location":"contributors.tutorials.doc-types-guide.html","text":"Wizeline Document Types Guide Wizeline's internal documentation consists of documents such as those that describe internal processes, policies, and guidelines. In general, it is information that the organization can reference to solve problems and complete tasks. Well-structured documentation ensures a seamless knowledge transfer and helps to avoid single-person ownership of information. These internal resources can fall under one of the following categories: Tutorial : Learning-oriented. How-to guide : Goal-oriented. Explanation : Understanding-oriented. Reference : Information-oriented. Each category has a purpose and a set of good practices to follow. The following table provides an overview of the different categories and their characteristics. Purpose Format Example Tutorial Learning Lesson How to change a light bulb How-to Guide Completing a task Series of steps Guide to types of light bulbs and steps to change them Reference Consulting information Descriptions and facts Light bulb catalog Explanation Understanding information Extended explanation A text on the importance of light bulbs The subsections in this guide include detailed descriptions of each category. Tutorials Tutorials help you complete a task without assuming prior knowledge; they are beginner-friendly. To write an effective tutorial, consider the following: Make the objective clear from the beginning. Understand your audience and adapt your content accordingly. Create a structure that is organized and easy to follow. Make your first steps about getting situated; include instructions such as being in the correct directory or installing a dependency. Write clear and concise steps. Include the results you get after completing a step or action. Use examples. Proofread. Include additional support in the form of FAQs and references. Maintain and update. Ensure that your tutorial is helpful, engaging, and easy to follow. Note : You can use images and video to aid your explanation, but keep in mind that they can complicate the task of maintaining and updating your tutorial. The following are examples of tutorials: Tutorial for requesting cloud services . Steps to set up Okta on a mobile device . Instructions to install Zoom plug-in for Google Calendar . How-to Guides How-to guides are different from tutorials. These types of documents teach you how to solve problems assuming you have prior knowledge. Comprehensive how-to guides are an excellent companion for products and services. To create a helpful guide, consider the following: Plan and research before writing. Understand your audience and adapt your content accordingly. Explain why the guide is important. Create a structure that is organized and easy to follow. Use a table of contents, clear headings, and labels to help the reader find specific sections or content. Provide examples, notes, tips, and important messages. Use numbered lists to organize ideas and present steps. Use visual media to support your written content, not as a substitute for it. A great how-to guide takes you through the basic process while giving you the tools for optional enhancements. The following are examples of how-to guides: Guide for writing a blog post for The Pulse. Guide on how to report time in Clockify for the Solutions Team . References Reference documentation educates people on relevant topics, processes, and policies. A reference document provides information and facts that help the members of the organization with decision-making and problem-solving. The following are things to consider when writing references: Understand your audience and adapt your content accordingly. Focus on simplicity. Cover only one topic or process per document. Use gender-neutral language. Use headings and labels to make sections clear and accessible. Maintain and update. The following are examples of references: Company policies Guidelines Employee handbooks A glossary of terms Onboarding information Software documentation Explanations This blog-style documentation not only displays information but also provides the context and reasoning behind it. The following are things to consider when writing explanation documents: Understand your audience. Focus on simplicity. Use gender-neutral language. Write short paragraphs. Organize the ideas logically. Use headings and labels to make sections clear and accessible. The following are examples of explanation style documents: Newsletters The Pulse by Wizeline Weekly Digest References and Further Reading Consult the following resources for more information: How to Write Great Tutorials - 5 key points to include - Blog resource 11 Essential Tips to Writing the Ultimate Tutorial - Blog resource 10 Steps to Write a Tutorial: A beginner's guide - Everfinite Creating a 'How to' Guide - University of Bath Creating a 'How to' Guide - Medium How to Create a Comprehensive How to Guide (+Examples) - Blog resource How to Ace Internal Documentation - Atlassian Documentation System: Introduction - Divio","title":"Wizeline Document Types Guide"},{"location":"contributors.tutorials.doc-types-guide.html#wizeline-document-types-guide","text":"Wizeline's internal documentation consists of documents such as those that describe internal processes, policies, and guidelines. In general, it is information that the organization can reference to solve problems and complete tasks. Well-structured documentation ensures a seamless knowledge transfer and helps to avoid single-person ownership of information. These internal resources can fall under one of the following categories: Tutorial : Learning-oriented. How-to guide : Goal-oriented. Explanation : Understanding-oriented. Reference : Information-oriented. Each category has a purpose and a set of good practices to follow. The following table provides an overview of the different categories and their characteristics. Purpose Format Example Tutorial Learning Lesson How to change a light bulb How-to Guide Completing a task Series of steps Guide to types of light bulbs and steps to change them Reference Consulting information Descriptions and facts Light bulb catalog Explanation Understanding information Extended explanation A text on the importance of light bulbs The subsections in this guide include detailed descriptions of each category.","title":"Wizeline Document Types Guide"},{"location":"contributors.tutorials.doc-types-guide.html#tutorials","text":"Tutorials help you complete a task without assuming prior knowledge; they are beginner-friendly. To write an effective tutorial, consider the following: Make the objective clear from the beginning. Understand your audience and adapt your content accordingly. Create a structure that is organized and easy to follow. Make your first steps about getting situated; include instructions such as being in the correct directory or installing a dependency. Write clear and concise steps. Include the results you get after completing a step or action. Use examples. Proofread. Include additional support in the form of FAQs and references. Maintain and update. Ensure that your tutorial is helpful, engaging, and easy to follow. Note : You can use images and video to aid your explanation, but keep in mind that they can complicate the task of maintaining and updating your tutorial. The following are examples of tutorials: Tutorial for requesting cloud services . Steps to set up Okta on a mobile device . Instructions to install Zoom plug-in for Google Calendar .","title":"Tutorials"},{"location":"contributors.tutorials.doc-types-guide.html#how-to-guides","text":"How-to guides are different from tutorials. These types of documents teach you how to solve problems assuming you have prior knowledge. Comprehensive how-to guides are an excellent companion for products and services. To create a helpful guide, consider the following: Plan and research before writing. Understand your audience and adapt your content accordingly. Explain why the guide is important. Create a structure that is organized and easy to follow. Use a table of contents, clear headings, and labels to help the reader find specific sections or content. Provide examples, notes, tips, and important messages. Use numbered lists to organize ideas and present steps. Use visual media to support your written content, not as a substitute for it. A great how-to guide takes you through the basic process while giving you the tools for optional enhancements. The following are examples of how-to guides: Guide for writing a blog post for The Pulse. Guide on how to report time in Clockify for the Solutions Team .","title":"How-to Guides"},{"location":"contributors.tutorials.doc-types-guide.html#references","text":"Reference documentation educates people on relevant topics, processes, and policies. A reference document provides information and facts that help the members of the organization with decision-making and problem-solving. The following are things to consider when writing references: Understand your audience and adapt your content accordingly. Focus on simplicity. Cover only one topic or process per document. Use gender-neutral language. Use headings and labels to make sections clear and accessible. Maintain and update. The following are examples of references: Company policies Guidelines Employee handbooks A glossary of terms Onboarding information Software documentation","title":"References"},{"location":"contributors.tutorials.doc-types-guide.html#explanations","text":"This blog-style documentation not only displays information but also provides the context and reasoning behind it. The following are things to consider when writing explanation documents: Understand your audience. Focus on simplicity. Use gender-neutral language. Write short paragraphs. Organize the ideas logically. Use headings and labels to make sections clear and accessible. The following are examples of explanation style documents: Newsletters The Pulse by Wizeline Weekly Digest","title":"Explanations"},{"location":"contributors.tutorials.doc-types-guide.html#references-and-further-reading","text":"Consult the following resources for more information: How to Write Great Tutorials - 5 key points to include - Blog resource 11 Essential Tips to Writing the Ultimate Tutorial - Blog resource 10 Steps to Write a Tutorial: A beginner's guide - Everfinite Creating a 'How to' Guide - University of Bath Creating a 'How to' Guide - Medium How to Create a Comprehensive How to Guide (+Examples) - Blog resource How to Ace Internal Documentation - Atlassian Documentation System: Introduction - Divio","title":"References and Further Reading"},{"location":"contributors.tutorials.docs-as-code.html","text":"Wizeline Docs as Code Wizeline Docs as Code is an internal documentation strategy to establish an SSOT. The goal is for Wizeliners to create, maintain, and share internal documentation across the different disciplines using the proposed site built with MkDocs and Material for MkDocs . Setting up Wizeline Docs as Code Locally To set up Wizeline Docs as Code in your local environment, follow the steps in the wizedocs/mkdocs_README.md directory. Collaborating You can add new pages to the Wizeline Docs as Code repository to update the site using the GitHub user interface (UI) or via the Command Line Interface (CLI). Adding New Pages Using the GitHub UI To add a new page using the GitHub UI, follow the next steps: Navigate to the wizedocs/docs/ directory in the Wizeline Docs as Code repository. Click the Add file button on the top right corner and choose to Create a new file or Upload files if you have a document ready. Note : Use the navigation levels to name your .md file. Separate the navigation levels that lead to your document with a period and use hyphens instead of spaces. For example, if you have a document named \"Style Guide for Contributors\" in a writing section under contributors, name your file as follows: contributors.writing.style-guide-for-contributors.md Create a Markdown file with the documentation you want to add to the site. Important : Your document must include the following details before its contents: --- title: [ Title of your document ] summary: [ Include a brief description of your document ] authors: [ Include your name and the names of any additional collaborators ] labels: [ Key words separated by a comma, example: \"wizeline, tw\" ] sections: [ Path to section in navigation, example: \"For Everyone/SRE\" ] document-type: [ Tutorial, How-to Guide, Reference or Explanation ] --- You can consult this raw document to see an example. Fill the fields in the Commit new file section. Select the Create a new branch for this commit and start a pull request option. Click the Commit new file button. Adding New Pages via CLI To add a new page using the command line, follow the next steps: Clone the repository: git clone git@github.com:wizeline/wizedocs.git Navigate to your local wizedocs/docs/ directory and create your own branch as follows: git checkout -b your-branch Note : Give your branch a name that relates to the document you are creating. Create a new .md file into the wizedocs/docs/ folder. Remember to follow the naming convention described in step two of Adding New Pages Using the GitHub UI and include the details described in step three at the top of your document. Add to Git the files you create and modify using the add command: bash git add 'your-document.md' Commit and push your changes: git commit -m 'description of commit' git push -u origin your-branch Go to the GitHub repository and create a pull request; this action enables you to add a reviewer for the document. Once you complete the review and everything looks good, you can continue the process and merge the changes. At this point your document will appear on the site. References and Further Reading Consult the following resources for more information on MkDocs and using Git: Detailed information about writing your documents with MkDocs is available on the MkDocs official website . GitHub branching, pull requests, and merging resources: Creating a New Branch in GitHub Made Effortless by Vikash Koushik. Git Branches FAQ from the Tower website. Creating a Pull Request from GitHub Docs. Pull Request Tutorial by Yang Su. Merging a Pull Request from GitHub Docs.","title":"Wizeline Docs as Code"},{"location":"contributors.tutorials.docs-as-code.html#wizeline-docs-as-code","text":"Wizeline Docs as Code is an internal documentation strategy to establish an SSOT. The goal is for Wizeliners to create, maintain, and share internal documentation across the different disciplines using the proposed site built with MkDocs and Material for MkDocs .","title":"Wizeline Docs as Code"},{"location":"contributors.tutorials.docs-as-code.html#setting-up-wizeline-docs-as-code-locally","text":"To set up Wizeline Docs as Code in your local environment, follow the steps in the wizedocs/mkdocs_README.md directory.","title":"Setting up Wizeline Docs as Code Locally"},{"location":"contributors.tutorials.docs-as-code.html#collaborating","text":"You can add new pages to the Wizeline Docs as Code repository to update the site using the GitHub user interface (UI) or via the Command Line Interface (CLI).","title":"Collaborating"},{"location":"contributors.tutorials.docs-as-code.html#adding-new-pages-using-the-github-ui","text":"To add a new page using the GitHub UI, follow the next steps: Navigate to the wizedocs/docs/ directory in the Wizeline Docs as Code repository. Click the Add file button on the top right corner and choose to Create a new file or Upload files if you have a document ready. Note : Use the navigation levels to name your .md file. Separate the navigation levels that lead to your document with a period and use hyphens instead of spaces. For example, if you have a document named \"Style Guide for Contributors\" in a writing section under contributors, name your file as follows: contributors.writing.style-guide-for-contributors.md Create a Markdown file with the documentation you want to add to the site. Important : Your document must include the following details before its contents: --- title: [ Title of your document ] summary: [ Include a brief description of your document ] authors: [ Include your name and the names of any additional collaborators ] labels: [ Key words separated by a comma, example: \"wizeline, tw\" ] sections: [ Path to section in navigation, example: \"For Everyone/SRE\" ] document-type: [ Tutorial, How-to Guide, Reference or Explanation ] --- You can consult this raw document to see an example. Fill the fields in the Commit new file section. Select the Create a new branch for this commit and start a pull request option. Click the Commit new file button.","title":"Adding New Pages Using the GitHub UI"},{"location":"contributors.tutorials.docs-as-code.html#adding-new-pages-via-cli","text":"To add a new page using the command line, follow the next steps: Clone the repository: git clone git@github.com:wizeline/wizedocs.git Navigate to your local wizedocs/docs/ directory and create your own branch as follows: git checkout -b your-branch Note : Give your branch a name that relates to the document you are creating. Create a new .md file into the wizedocs/docs/ folder. Remember to follow the naming convention described in step two of Adding New Pages Using the GitHub UI and include the details described in step three at the top of your document. Add to Git the files you create and modify using the add command: bash git add 'your-document.md' Commit and push your changes: git commit -m 'description of commit' git push -u origin your-branch Go to the GitHub repository and create a pull request; this action enables you to add a reviewer for the document. Once you complete the review and everything looks good, you can continue the process and merge the changes. At this point your document will appear on the site.","title":"Adding New Pages via CLI"},{"location":"contributors.tutorials.docs-as-code.html#references-and-further-reading","text":"Consult the following resources for more information on MkDocs and using Git: Detailed information about writing your documents with MkDocs is available on the MkDocs official website . GitHub branching, pull requests, and merging resources: Creating a New Branch in GitHub Made Effortless by Vikash Koushik. Git Branches FAQ from the Tower website. Creating a Pull Request from GitHub Docs. Pull Request Tutorial by Yang Su. Merging a Pull Request from GitHub Docs.","title":"References and Further Reading"},{"location":"contributors.tutorials.docs-structure-for-readers.html","text":"Writing for Readers As developers and team members create documentation, they must consider that their average reader do not necessarily read it thoroughly. The reader and the writer have different points of view and needs. As a writer, you must ensure that your audience perceives your documentation as beneficial and easy to understand. Tips for Creating Reader-Focused Documentation When writing, follow the next tips: Identify the type of documentation you want to write. Follow a good structure . Have all the information in a single page . Know your audience . Create a One Entry Point . Types of Documentation Writers can develop different types of documentation depending on their needs. These resources fall under one of the following categories: Tutorials How-to Guides Explanations References It is essential to have this in mind; the readers can use a platform more effectively by following instructions in the correct document format. For more information on document types, go to the Document Types Guide . Document Structure Your documentation has to be engaging and compelling. You must create a writing format for your readers to follow. Some examples of structures are: Tell a Story : Create a path for your reader to follow a linear narrative. Paint a Picture : Describe everything the user sees and needs in a specific moment. Give enough details not to require an image. Theme and Situations : Give the reader a scenario and accompany them to the proper solution. Level Up : Show the most straightforward steps to the user first, and gradually increase the difficulty level. Single Page Usage Create documentation that covers a specific topic. Most readers do not read your documentation from start to end. Having all the information on a single page helps the reader quickly find specific information. Know Your Audience Just as it is different to write to a family member than a colleague, you must keep in mind who are the people that read your content. When writing technical documentation, you must consider three main reader archetypes: Technical Semi-technical Non-technical. For more information on audiences, go to the Project Structure Guide . One Entry Point An Entry Point is a page with links to every file and document available for the reader. Although this is not the only access method, it is essential to have a general overview of the documentation. This makes it easier to reference content and to know where to find a specific topic. References and Further Reading Consult the following resources for more information: Introduction to Documentation System - Divio Documentation Structure - Read the Docs","title":"Writing for Readers"},{"location":"contributors.tutorials.docs-structure-for-readers.html#writing-for-readers","text":"As developers and team members create documentation, they must consider that their average reader do not necessarily read it thoroughly. The reader and the writer have different points of view and needs. As a writer, you must ensure that your audience perceives your documentation as beneficial and easy to understand.","title":"Writing for Readers"},{"location":"contributors.tutorials.docs-structure-for-readers.html#tips-for-creating-reader-focused-documentation","text":"When writing, follow the next tips: Identify the type of documentation you want to write. Follow a good structure . Have all the information in a single page . Know your audience . Create a One Entry Point .","title":"Tips for Creating Reader-Focused Documentation"},{"location":"contributors.tutorials.docs-structure-for-readers.html#types-of-documentation","text":"Writers can develop different types of documentation depending on their needs. These resources fall under one of the following categories: Tutorials How-to Guides Explanations References It is essential to have this in mind; the readers can use a platform more effectively by following instructions in the correct document format. For more information on document types, go to the Document Types Guide .","title":"Types of Documentation"},{"location":"contributors.tutorials.docs-structure-for-readers.html#document-structure","text":"Your documentation has to be engaging and compelling. You must create a writing format for your readers to follow. Some examples of structures are: Tell a Story : Create a path for your reader to follow a linear narrative. Paint a Picture : Describe everything the user sees and needs in a specific moment. Give enough details not to require an image. Theme and Situations : Give the reader a scenario and accompany them to the proper solution. Level Up : Show the most straightforward steps to the user first, and gradually increase the difficulty level.","title":"Document Structure"},{"location":"contributors.tutorials.docs-structure-for-readers.html#single-page-usage","text":"Create documentation that covers a specific topic. Most readers do not read your documentation from start to end. Having all the information on a single page helps the reader quickly find specific information.","title":"Single Page Usage"},{"location":"contributors.tutorials.docs-structure-for-readers.html#know-your-audience","text":"Just as it is different to write to a family member than a colleague, you must keep in mind who are the people that read your content. When writing technical documentation, you must consider three main reader archetypes: Technical Semi-technical Non-technical. For more information on audiences, go to the Project Structure Guide .","title":"Know Your Audience"},{"location":"contributors.tutorials.docs-structure-for-readers.html#one-entry-point","text":"An Entry Point is a page with links to every file and document available for the reader. Although this is not the only access method, it is essential to have a general overview of the documentation. This makes it easier to reference content and to know where to find a specific topic.","title":"One Entry Point"},{"location":"contributors.tutorials.docs-structure-for-readers.html#references-and-further-reading","text":"Consult the following resources for more information: Introduction to Documentation System - Divio Documentation Structure - Read the Docs","title":"References and Further Reading"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html","text":"Markdown Guide for Contributors This guide helps you to effectively create documents using Markdown by providing tips and guidance in a compact, easy-to-navigate way. Use this guide to get familiar with the Markdown features and syntax. What is Markdown? Markdown is a plain text formatting syntax. Markdown lets you write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid HTML. Writing your documents using Markdown has multiple benefits, such as: The source text is readable and portable. The files are easy to maintain. The syntax is simple. Markdown is platform-independent. The following sections cover the basics for writing content using Markdown. Creating a Markdown Document You can create Markdown documents directly on websites that support it like GitHub and Reddit, and many desktop and Web-based applications let you create and preview the formatted text. On Visual Studio Code once you save your plain text file with the .md or .markdown extension, the editor enables the preview window for your document. Syntax and Style This section covers the basic syntax you need to format the contents of your documents using Markdown. Basic Document Layout The basic document in Markdown consists of the following elements: # Document Title ## Section Content ### Subsection More content From the previous layout, consider the following: The document title is a level one heading; the title usually matches the filename. The document is separated into sections or level two headings. Each section can include subsections or level three headings; you can create further levels as needed. Headings To create a heading, add number signs (#) in front of a word or phrase. The amount of number signs that you use corresponds to the heading level. Note : There is a limit at six number signs for header levels. The following are some examples of headings: # This is an H1 ## This is an H2 ###### This is an H6 Important : For compatibility, always add a space between the number signs and the heading name. Some Markdown applications don't interpret the heading correctly when the single space is missing. Emphasis Emphasis works in a few different ways: Italics : Input: *asterisks* or _underscores_ Output: asterisks or underscores Bold : Input: **asterisks** or __underscores__ Output: asterisks or underscores Combined emphasis : Input: **asterisks and _underscores_** Output: asterisks and underscores Strikethrough : Input: ~~Scratch this.~~ Output: ~~Scratch this.~~ Line Breaks To create a line break ( <br> ), end a line with two or more spaces and then type return. To separate paragraphs, type return twice. Lists Unordered lists use hyphens as list markers: - First item - Second item - Third item First item Second item Third item Indent one or more items to create a nested list: - First item - Indented item - Second item First item Indented item Second item To create an ordered list, add line items with numbers followed by periods. Ordered List: 1. Item number one 2. Item number two 3. Item number three The rendered output looks like this: Ordered List: Item number one Item number two Item number three For longer ordered lists that can change, Markdown can interpret \"lazy numbering\" or using number \"1\" for all instances: List with \"lazy numbering\": 1. Item 1 1. Item 2 1. Item 1 1. Item 2 1. Item 3 The rendered output looks like this: List with \"lazy numbering\": Item 1 Item 2 Item 1 Item 2 Item 3 Links To create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses. Visit the [ Markdown Guide website ]( https://www.markdownguide.org/ ) for more information. The rendered output looks like this: Visit the Markdown Guide website for more information. Images To add images follow the same syntax used for links, but start with (!) to denote an image reference. The source of the image can be an address or a local file. Here is an example of an image taken from a Web address: ![ A flower ]( https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRujf-PCBT_fnN056fqMNSkcfL4jYzTlvfiPw&usqp=CAU ) The rendered output looks like this: To customize images when using Markdown you can use HTML syntax: <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRujf-PCBT_fnN056 fqMNSkcfL4jYzTlvfiPw&usqp=CAU\" width=\"150\" height=\"100\"/> The rendered output looks like this: Tables To add a table, use three or more hyphens (---) to create each column\u2019s header, and use pipes (|) to separate each column. | Column 1 | Column 2 | | ----------- | ----------- | | Item | Text | | Item | Text | The rendered output looks like this: Column 1 Column 2 Item Text Item Text Note that the input table does not need to be aligned with the help of spacing to render correctly: | Column 1 | Column 2 | | ------ | ---- | | Item | Text | | Item 2| More Text | The rendered output looks like this: Column 1 Column 2 Item Text Item 2 More Text Blockquotes To create a blockquote, start a line with a \"greater than\" (>) symbol followed by an optional space. Nesting blockquotes is easy; you can indicate the different levels by the number of \"greater than\" symbols: > You can create blockquotes with the \"greater than\" symbol. > And even include different *styles* of **text**. >> You can nest blockquotes too. >>> Indicate nesting levels with the number of \"greater than\" symbols. The rendered output looks like this: You can create blockquotes with the \"greater than\" symbol and even include different styles of text . You can nest blockquotes too. Indicate nesting levels with the number of \"greater than\" symbols. Code Elements To denote a word or phrase as code, enclose it in backticks (`): This is a `code element` . The rendered output looks like this: This is a code element . To create a code block, enclose it in triple backticks (```). References and Further Reading Consult the following resources for more information on using Markdown: Markdown Guide - Free and open-source reference guide Markdown Project - By John Gruber Markdown Style Guide - Google Open Source Mastering Markdown - GitHub Guides Markdown Cheatsheet - By Adam Pritchard","title":"Markdown Guide for Contributors"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#markdown-guide-for-contributors","text":"This guide helps you to effectively create documents using Markdown by providing tips and guidance in a compact, easy-to-navigate way. Use this guide to get familiar with the Markdown features and syntax.","title":"Markdown Guide for Contributors"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#what-is-markdown","text":"Markdown is a plain text formatting syntax. Markdown lets you write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid HTML. Writing your documents using Markdown has multiple benefits, such as: The source text is readable and portable. The files are easy to maintain. The syntax is simple. Markdown is platform-independent. The following sections cover the basics for writing content using Markdown.","title":"What is Markdown?"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#creating-a-markdown-document","text":"You can create Markdown documents directly on websites that support it like GitHub and Reddit, and many desktop and Web-based applications let you create and preview the formatted text. On Visual Studio Code once you save your plain text file with the .md or .markdown extension, the editor enables the preview window for your document.","title":"Creating a Markdown Document"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#syntax-and-style","text":"This section covers the basic syntax you need to format the contents of your documents using Markdown.","title":"Syntax and Style"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#basic-document-layout","text":"The basic document in Markdown consists of the following elements: # Document Title ## Section Content ### Subsection More content From the previous layout, consider the following: The document title is a level one heading; the title usually matches the filename. The document is separated into sections or level two headings. Each section can include subsections or level three headings; you can create further levels as needed.","title":"Basic Document Layout"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#headings","text":"To create a heading, add number signs (#) in front of a word or phrase. The amount of number signs that you use corresponds to the heading level. Note : There is a limit at six number signs for header levels. The following are some examples of headings: # This is an H1 ## This is an H2 ###### This is an H6 Important : For compatibility, always add a space between the number signs and the heading name. Some Markdown applications don't interpret the heading correctly when the single space is missing.","title":"Headings"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#emphasis","text":"Emphasis works in a few different ways: Italics : Input: *asterisks* or _underscores_ Output: asterisks or underscores Bold : Input: **asterisks** or __underscores__ Output: asterisks or underscores Combined emphasis : Input: **asterisks and _underscores_** Output: asterisks and underscores Strikethrough : Input: ~~Scratch this.~~ Output: ~~Scratch this.~~","title":"Emphasis"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#line-breaks","text":"To create a line break ( <br> ), end a line with two or more spaces and then type return. To separate paragraphs, type return twice.","title":"Line Breaks"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#lists","text":"Unordered lists use hyphens as list markers: - First item - Second item - Third item First item Second item Third item Indent one or more items to create a nested list: - First item - Indented item - Second item First item Indented item Second item To create an ordered list, add line items with numbers followed by periods. Ordered List: 1. Item number one 2. Item number two 3. Item number three The rendered output looks like this: Ordered List: Item number one Item number two Item number three For longer ordered lists that can change, Markdown can interpret \"lazy numbering\" or using number \"1\" for all instances: List with \"lazy numbering\": 1. Item 1 1. Item 2 1. Item 1 1. Item 2 1. Item 3 The rendered output looks like this: List with \"lazy numbering\": Item 1 Item 2 Item 1 Item 2 Item 3","title":"Lists"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#links","text":"To create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses. Visit the [ Markdown Guide website ]( https://www.markdownguide.org/ ) for more information. The rendered output looks like this: Visit the Markdown Guide website for more information.","title":"Links"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#images","text":"To add images follow the same syntax used for links, but start with (!) to denote an image reference. The source of the image can be an address or a local file. Here is an example of an image taken from a Web address: ![ A flower ]( https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRujf-PCBT_fnN056fqMNSkcfL4jYzTlvfiPw&usqp=CAU ) The rendered output looks like this: To customize images when using Markdown you can use HTML syntax: <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRujf-PCBT_fnN056 fqMNSkcfL4jYzTlvfiPw&usqp=CAU\" width=\"150\" height=\"100\"/> The rendered output looks like this:","title":"Images"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#tables","text":"To add a table, use three or more hyphens (---) to create each column\u2019s header, and use pipes (|) to separate each column. | Column 1 | Column 2 | | ----------- | ----------- | | Item | Text | | Item | Text | The rendered output looks like this: Column 1 Column 2 Item Text Item Text Note that the input table does not need to be aligned with the help of spacing to render correctly: | Column 1 | Column 2 | | ------ | ---- | | Item | Text | | Item 2| More Text | The rendered output looks like this: Column 1 Column 2 Item Text Item 2 More Text","title":"Tables"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#blockquotes","text":"To create a blockquote, start a line with a \"greater than\" (>) symbol followed by an optional space. Nesting blockquotes is easy; you can indicate the different levels by the number of \"greater than\" symbols: > You can create blockquotes with the \"greater than\" symbol. > And even include different *styles* of **text**. >> You can nest blockquotes too. >>> Indicate nesting levels with the number of \"greater than\" symbols. The rendered output looks like this: You can create blockquotes with the \"greater than\" symbol and even include different styles of text . You can nest blockquotes too. Indicate nesting levels with the number of \"greater than\" symbols.","title":"Blockquotes"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#code-elements","text":"To denote a word or phrase as code, enclose it in backticks (`): This is a `code element` . The rendered output looks like this: This is a code element . To create a code block, enclose it in triple backticks (```).","title":"Code Elements"},{"location":"contributors.tutorials.markdown-guide-for-contributors.html#references-and-further-reading","text":"Consult the following resources for more information on using Markdown: Markdown Guide - Free and open-source reference guide Markdown Project - By John Gruber Markdown Style Guide - Google Open Source Mastering Markdown - GitHub Guides Markdown Cheatsheet - By Adam Pritchard","title":"References and Further Reading"},{"location":"contributors.tutorials.merging-guide.html","text":"Publishing Guidelines This guide helps you understand the publishing process for adding content to the Wizeline Knowledge Center, which consists of five steps: Request writing access. Create a pull request. Review the pull request. Make corrections and resolve comments. Merge the pull request. The following sections describe each of these actions. 1. Request Writing Access Go to the Slack channel #wizeline-docs-as-code and request writing access. Note : Future iterations of the project seek to remove the need for this step. 2. Create a Pull Request You can use the New Document template to collaborate with the project using GitHub's user interface (UI), or follow the guide to set up Wizeline docs as code on your computer and collaborate using the command line interface (CLI). Both the UI and CLI approaches result in the creation of a pull request on GitHub that enables you to add your documents to the site. 3. Review the Pull Request To access your pull request on GitHub, go to the Wizeline Docs as Code repository and click the Pull requests tab on the top menu; this action takes you to a list of open pull requests. Click the name of your pull request to open the detailed page. The pull request page enables you to explore the aspects required to merge your changes with the project and publish your content. Navigate to the bottom of the pull request page and find the automatic checks' status . For checks that are not successful, click Details to review why the check failed. The automatic checks highlight grammar errors, format errors, and ensure your document follows Wizeline's writing style guide. 4. Make Corrections and Resolve Issues Use the automatic checks as a guide to make corrections to your documents. This review process helps you create good quality content by emulating a peer review while enabling you to complete tasks on your own. When you change your documents, the checks run again and the pull request page displays the updated status. 5. Merge the Pull Request When all checks are successful, your pull request is ready for merging. To help you with this task, you can follow the steps for merging a pull request described by GitHub. After merging, the new content is available on the Wizeline Knowledge Center.","title":"Merging Guidelines"},{"location":"contributors.tutorials.merging-guide.html#publishing-guidelines","text":"This guide helps you understand the publishing process for adding content to the Wizeline Knowledge Center, which consists of five steps: Request writing access. Create a pull request. Review the pull request. Make corrections and resolve comments. Merge the pull request. The following sections describe each of these actions.","title":"Publishing Guidelines"},{"location":"contributors.tutorials.merging-guide.html#1-request-writing-access","text":"Go to the Slack channel #wizeline-docs-as-code and request writing access. Note : Future iterations of the project seek to remove the need for this step.","title":"1. Request Writing Access"},{"location":"contributors.tutorials.merging-guide.html#2-create-a-pull-request","text":"You can use the New Document template to collaborate with the project using GitHub's user interface (UI), or follow the guide to set up Wizeline docs as code on your computer and collaborate using the command line interface (CLI). Both the UI and CLI approaches result in the creation of a pull request on GitHub that enables you to add your documents to the site.","title":"2. Create a Pull Request"},{"location":"contributors.tutorials.merging-guide.html#3-review-the-pull-request","text":"To access your pull request on GitHub, go to the Wizeline Docs as Code repository and click the Pull requests tab on the top menu; this action takes you to a list of open pull requests. Click the name of your pull request to open the detailed page. The pull request page enables you to explore the aspects required to merge your changes with the project and publish your content. Navigate to the bottom of the pull request page and find the automatic checks' status . For checks that are not successful, click Details to review why the check failed. The automatic checks highlight grammar errors, format errors, and ensure your document follows Wizeline's writing style guide.","title":"3. Review the Pull Request"},{"location":"contributors.tutorials.merging-guide.html#4-make-corrections-and-resolve-issues","text":"Use the automatic checks as a guide to make corrections to your documents. This review process helps you create good quality content by emulating a peer review while enabling you to complete tasks on your own. When you change your documents, the checks run again and the pull request page displays the updated status.","title":"4. Make Corrections and Resolve Issues"},{"location":"contributors.tutorials.merging-guide.html#5-merge-the-pull-request","text":"When all checks are successful, your pull request is ready for merging. To help you with this task, you can follow the steps for merging a pull request described by GitHub. After merging, the new content is available on the Wizeline Knowledge Center.","title":"5. Merge the Pull Request"},{"location":"contributors.tutorials.style-guide.html","text":"Style Guide for Contributors The purpose of this style guide is to help you write excellent technical documents, presentations, and even emails. Bold, Italics, and Fixed Fonts Use Bold , Italics , and Fixed Font to highlight a specific word. The following sections explain when to use which for the maximum effect. Bold Use bold text to highlight the following: Terms used in a graphical interface (GUI), examples: Button names Field names Menus Radio buttons Checkboxes Terms that precede a colon (:) in bulleted lists. Names of packages. User input. Italics Use italics sparingly to emphasize a word or group of words. Fixed Font Use this style to highlight the following: Command or piece of code. File or folder names. Acronyms and Abbreviations This section covers the use of acronyms and abbreviations. Acronyms Define the acronym the first time you use it; for the subsequent instances, you can use the acronym by itself. Note : When specifying the plural form of an acronym, don't use an apostrophe before the letter \"s.\" Abbreviations Don't use the following abbreviations in any formal document: Abbreviation Alternative e.g. for example etc. Provide the full list of options. i.e. in other words fig. figure tbl. table pg. page Table 1. List of Common Abbreviations and Alternatives Capitalization The following are the rules of capitalization: General rules: Every new sentence starts with a capital letter. Each entry of the following starts with a capital letter: Bulleted lists Numbered lists Column headings in tables The first word after a colon (:) Tables and figures captions Headings Title case Use title case for headings and captions for tables and figures. Capitalize the following: Nouns Pronouns Verbs (except \"to be\") Adjectives First and last words Don't capitalize the following: Prepositions Conjunctions Articles Verb \"to be\" Lead-In Lines You must have lead-in lines. They are not a nice-to-have item, but a requirement. Lead-in lines not only create separators between sections and subsections, but most importantly, they set up the context of the upcoming information. You must specify a lead-in as follows: After any H1, H2, H3, or H4 heading Before: Bulleted lists Numbered lists Example code Difference Between \"it's\" and \"its\" The two main rules are: Always use \"it is\" instead of the contraction \"it's.\" \"its\" means belonging to something. Use of the Oxford Comma The Oxford comma is also known as the serial comma. The rules for its use are as follows: You don't use a comma before the conjunctions \u201cand\u201d and \u201cor\u201d if your list contains only two items. You use a comma before the conjunctions \u201cand\u201d and \u201cor\u201d when your list comprises three or more items. Use of Numbers The standard for using numbers is the following: Spell out numbers that are less than 10 (0\u20149). Use numerals for 10 and higher. Use a comma for easy readability for numbers higher than 999. Use percentages to depict fractions, if possible. Spell out the word \u201cpercent.\u201d Use of the Apostrophe in Contractions and Possessives Contractions are typically considered informal writing. It is best to adhere to the following rules: Use an apostrophe for possessives such as: User's (singular) Users' (plural) System's Don't use an apostrophe for: It's, instead spell out \"it is.\" Acronyms' plurals, such as APIs and LANs. Note : Avoid contractions such as \u201cdoesn\u2019t,\u201d \u201cyou\u2019ll,\u201d \u201cwouldn\u2019t,\u201d \u201cshouldn\u2019t,\u201d \u201ccouldn\u2019t,\u201d \u201cwe\u2019ll.\u201d Use of Bulleted and Numbered Lists The following are the general rules for lists: Use Bulleted lists when the order of the items in the list is not important. Use Numbered lists when the sequence of steps is important. How to Use Notes, Tips, and Important Messages Notes, Tips, and Important messages are a great way to convey special information to the reader; the following table explains when to use each: Message Type When to use it Note: Use it to convey extra or related information that could be useful for the reader. Tip: Use it to specify an alternate way of doing a task or to provide useful information. Important: Use it to highlight important information necessary to complete a task. Dos and Don\u2019ts to Keep in Mind While Writing This section gives you quick tips about the Dos and Don'ts that you need to keep in mind while writing. It is important to address the reader as \u201cyou,\u201d irrespective of whether they are an end user, a developer, or have any other role. Use active voice as much as you can. This helps the reader understand who is performing the task. Avoid the use of he or she. When referring to a third person, use the pronoun \"they,\" whether plural or singular. For accessibility, avoid the use of the \u201c&\u201d symbol. Use \u201cand\u201d instead. Don't use \u201c/\u201d to mean \u201cor.\u201d Avoid using words like \u201cshall,\u201d \u201ccould,\u201d and \u201cwould.\u201d Keep the audience type in mind while writing. When making recommendations, use Wizeline recommends . Don't use \u201cit is recommended\u201d or \u201cwe recommend.\u201d Don't use shortened words; spell them completely. Watch out for long sentences. If your sentence has more than 14 words, break the sentence in two. Ensure that headings, bulleted lists, and numbered lists start with the same type of word as much as possible. Ensure that all the items in bulleted and numbered lists, either end, or don't end with a period. Don't use the word \"please.\" Appendix: Words and Phrases to Avoid The following table describes some words and phrases to avoid and their corresponding alternatives: Word or Phrase to Avoid Alternative Option carry out perform allows enables below following above preceding via by using (or through) pre installation pre-installation post installation post-installation pre defined pre-defined url URL internet Internet web Web Web site website you need to... you must... a large number of many a majority of most a sufficient amount of enough adequate [specify a number, if possible] afterwards afterward alphanumerical alphanumeric an abundance of many aren\u2019t, doesn\u2019t are not, does not as per according to as well as and or also assuming that if at a later point in time later at all times always Once (at the beginning of the sentence) After... at the present time now or currently at the end of after at the time that when at this point in time now back slash backslash back space backspace back end, front end backend, frontend based on the fact that because be aware of the fact that know be sure that ensure that builtin built-in by means of by by reason of because by the name of called by the same token similarly by virtue of because can not cannot cancelled canceled cancelling canceling check list checklist checkbox check box click on click come to the conclusion that conclude comply with follow cross reference cross-reference datafile data file dataset data set datasource data source datatype data type deinstall uninstall down time downtime end result result except when unless forward slash slash from scratch from the start given the condition that if gives rise to causes has a requirement requires hover over hover if that is the case if so if that is not the case if not if you want to to in connection with of, related, about, for in order to to in the event that if in the past earlier in this day and age currently in view of because in-line inline is able to can is dependent on depends on labelling labeling log into log in to lower case lowercase make a choice choose, select make a decision decide make an assumption about assume make sure that ensure needs to be must not in a position to cannot on most occasions typically on the basis of because owing to the fact that because pathname path name period of time interval present time now previous to, prior to before provided that if radio button option runtime run-time (adj), run time (n) shows up appears some of the some stand-alone, stand alone standalone take action act take into account, take into consideration consider this means that therefore timezone time zone to create a new to create utilize use comprises of comprises when you are done when you complete the task whether or not whether wild card wildcard wish want with reference to, with regard to about with the exception that except that world-wide web World Wide Web you have to you must","title":"Style Guide for Contributors"},{"location":"contributors.tutorials.style-guide.html#style-guide-for-contributors","text":"The purpose of this style guide is to help you write excellent technical documents, presentations, and even emails.","title":"Style Guide for Contributors"},{"location":"contributors.tutorials.style-guide.html#bold-italics-and-fixed-fonts","text":"Use Bold , Italics , and Fixed Font to highlight a specific word. The following sections explain when to use which for the maximum effect.","title":"Bold, Italics, and Fixed Fonts"},{"location":"contributors.tutorials.style-guide.html#bold","text":"Use bold text to highlight the following: Terms used in a graphical interface (GUI), examples: Button names Field names Menus Radio buttons Checkboxes Terms that precede a colon (:) in bulleted lists. Names of packages. User input.","title":"Bold"},{"location":"contributors.tutorials.style-guide.html#italics","text":"Use italics sparingly to emphasize a word or group of words.","title":"Italics"},{"location":"contributors.tutorials.style-guide.html#fixed-font","text":"Use this style to highlight the following: Command or piece of code. File or folder names.","title":"Fixed Font"},{"location":"contributors.tutorials.style-guide.html#acronyms-and-abbreviations","text":"This section covers the use of acronyms and abbreviations.","title":"Acronyms and Abbreviations"},{"location":"contributors.tutorials.style-guide.html#acronyms","text":"Define the acronym the first time you use it; for the subsequent instances, you can use the acronym by itself. Note : When specifying the plural form of an acronym, don't use an apostrophe before the letter \"s.\"","title":"Acronyms"},{"location":"contributors.tutorials.style-guide.html#abbreviations","text":"Don't use the following abbreviations in any formal document: Abbreviation Alternative e.g. for example etc. Provide the full list of options. i.e. in other words fig. figure tbl. table pg. page Table 1. List of Common Abbreviations and Alternatives","title":"Abbreviations"},{"location":"contributors.tutorials.style-guide.html#capitalization","text":"The following are the rules of capitalization: General rules: Every new sentence starts with a capital letter. Each entry of the following starts with a capital letter: Bulleted lists Numbered lists Column headings in tables The first word after a colon (:) Tables and figures captions Headings Title case Use title case for headings and captions for tables and figures. Capitalize the following: Nouns Pronouns Verbs (except \"to be\") Adjectives First and last words Don't capitalize the following: Prepositions Conjunctions Articles Verb \"to be\"","title":"Capitalization"},{"location":"contributors.tutorials.style-guide.html#lead-in-lines","text":"You must have lead-in lines. They are not a nice-to-have item, but a requirement. Lead-in lines not only create separators between sections and subsections, but most importantly, they set up the context of the upcoming information. You must specify a lead-in as follows: After any H1, H2, H3, or H4 heading Before: Bulleted lists Numbered lists Example code","title":"Lead-In Lines"},{"location":"contributors.tutorials.style-guide.html#difference-between-its-and-its","text":"The two main rules are: Always use \"it is\" instead of the contraction \"it's.\" \"its\" means belonging to something.","title":"Difference Between \"it's\" and \"its\""},{"location":"contributors.tutorials.style-guide.html#use-of-the-oxford-comma","text":"The Oxford comma is also known as the serial comma. The rules for its use are as follows: You don't use a comma before the conjunctions \u201cand\u201d and \u201cor\u201d if your list contains only two items. You use a comma before the conjunctions \u201cand\u201d and \u201cor\u201d when your list comprises three or more items.","title":"Use of the Oxford Comma"},{"location":"contributors.tutorials.style-guide.html#use-of-numbers","text":"The standard for using numbers is the following: Spell out numbers that are less than 10 (0\u20149). Use numerals for 10 and higher. Use a comma for easy readability for numbers higher than 999. Use percentages to depict fractions, if possible. Spell out the word \u201cpercent.\u201d","title":"Use of Numbers"},{"location":"contributors.tutorials.style-guide.html#use-of-the-apostrophe-in-contractions-and-possessives","text":"Contractions are typically considered informal writing. It is best to adhere to the following rules: Use an apostrophe for possessives such as: User's (singular) Users' (plural) System's Don't use an apostrophe for: It's, instead spell out \"it is.\" Acronyms' plurals, such as APIs and LANs. Note : Avoid contractions such as \u201cdoesn\u2019t,\u201d \u201cyou\u2019ll,\u201d \u201cwouldn\u2019t,\u201d \u201cshouldn\u2019t,\u201d \u201ccouldn\u2019t,\u201d \u201cwe\u2019ll.\u201d","title":"Use of the Apostrophe in Contractions and Possessives"},{"location":"contributors.tutorials.style-guide.html#use-of-bulleted-and-numbered-lists","text":"The following are the general rules for lists: Use Bulleted lists when the order of the items in the list is not important. Use Numbered lists when the sequence of steps is important.","title":"Use of Bulleted and Numbered Lists"},{"location":"contributors.tutorials.style-guide.html#how-to-use-notes-tips-and-important-messages","text":"Notes, Tips, and Important messages are a great way to convey special information to the reader; the following table explains when to use each: Message Type When to use it Note: Use it to convey extra or related information that could be useful for the reader. Tip: Use it to specify an alternate way of doing a task or to provide useful information. Important: Use it to highlight important information necessary to complete a task.","title":"How to Use Notes, Tips, and Important Messages"},{"location":"contributors.tutorials.style-guide.html#dos-and-donts-to-keep-in-mind-while-writing","text":"This section gives you quick tips about the Dos and Don'ts that you need to keep in mind while writing. It is important to address the reader as \u201cyou,\u201d irrespective of whether they are an end user, a developer, or have any other role. Use active voice as much as you can. This helps the reader understand who is performing the task. Avoid the use of he or she. When referring to a third person, use the pronoun \"they,\" whether plural or singular. For accessibility, avoid the use of the \u201c&\u201d symbol. Use \u201cand\u201d instead. Don't use \u201c/\u201d to mean \u201cor.\u201d Avoid using words like \u201cshall,\u201d \u201ccould,\u201d and \u201cwould.\u201d Keep the audience type in mind while writing. When making recommendations, use Wizeline recommends . Don't use \u201cit is recommended\u201d or \u201cwe recommend.\u201d Don't use shortened words; spell them completely. Watch out for long sentences. If your sentence has more than 14 words, break the sentence in two. Ensure that headings, bulleted lists, and numbered lists start with the same type of word as much as possible. Ensure that all the items in bulleted and numbered lists, either end, or don't end with a period. Don't use the word \"please.\"","title":"Dos and Don\u2019ts to Keep in Mind While Writing"},{"location":"contributors.tutorials.style-guide.html#appendix-words-and-phrases-to-avoid","text":"The following table describes some words and phrases to avoid and their corresponding alternatives: Word or Phrase to Avoid Alternative Option carry out perform allows enables below following above preceding via by using (or through) pre installation pre-installation post installation post-installation pre defined pre-defined url URL internet Internet web Web Web site website you need to... you must... a large number of many a majority of most a sufficient amount of enough adequate [specify a number, if possible] afterwards afterward alphanumerical alphanumeric an abundance of many aren\u2019t, doesn\u2019t are not, does not as per according to as well as and or also assuming that if at a later point in time later at all times always Once (at the beginning of the sentence) After... at the present time now or currently at the end of after at the time that when at this point in time now back slash backslash back space backspace back end, front end backend, frontend based on the fact that because be aware of the fact that know be sure that ensure that builtin built-in by means of by by reason of because by the name of called by the same token similarly by virtue of because can not cannot cancelled canceled cancelling canceling check list checklist checkbox check box click on click come to the conclusion that conclude comply with follow cross reference cross-reference datafile data file dataset data set datasource data source datatype data type deinstall uninstall down time downtime end result result except when unless forward slash slash from scratch from the start given the condition that if gives rise to causes has a requirement requires hover over hover if that is the case if so if that is not the case if not if you want to to in connection with of, related, about, for in order to to in the event that if in the past earlier in this day and age currently in view of because in-line inline is able to can is dependent on depends on labelling labeling log into log in to lower case lowercase make a choice choose, select make a decision decide make an assumption about assume make sure that ensure needs to be must not in a position to cannot on most occasions typically on the basis of because owing to the fact that because pathname path name period of time interval present time now previous to, prior to before provided that if radio button option runtime run-time (adj), run time (n) shows up appears some of the some stand-alone, stand alone standalone take action act take into account, take into consideration consider this means that therefore timezone time zone to create a new to create utilize use comprises of comprises when you are done when you complete the task whether or not whether wild card wildcard wish want with reference to, with regard to about with the exception that except that world-wide web World Wide Web you have to you must","title":"Appendix: Words and Phrases to Avoid"},{"location":"discipline-sre.explain.definition.html","text":"The SRE Discipline at Wizeline [overview] My Definition of DevOps author: Saul Ortigoza NOTE: this is just a random note I wrote for myself but you might find it useful. Goal: fast flow, less errors, more focus on value, more quality lean manufacturing applied to IT, what. the agile manifesto was missing. build cross-functional teams to break silos. end to end ownership culture and of what the team builds. create your process map , measure it and improve it. automate CI, CD, tests everything is in version control (Infrastructure, Configuration, Code) and is reviewed leverage the cloud to build more reliable systems, faster DevOps is a culture not a role feedback loops Automation skills are the most important: automate CI, CD automate tests provisioning *Organizations best practices: Agile, DevOps, ITIL, SRE References https://en.wikipedia.org/wiki/Information_lifecycle_management https://en.wikipedia.org/wiki/ITIL https://en.wikipedia.org/wiki/IT_service_management https://enterprisersproject.com/article/2019/11/devops-vs-itil4-vs-SRE https://en.wikipedia.org/wiki/Runbook","title":"The SRE Discipline  at Wizeline"},{"location":"discipline-sre.explain.definition.html#the-sre-discipline-at-wizeline","text":"[overview]","title":"The SRE Discipline at Wizeline"},{"location":"discipline-sre.explain.definition.html#my-definition-of-devops","text":"author: Saul Ortigoza NOTE: this is just a random note I wrote for myself but you might find it useful. Goal: fast flow, less errors, more focus on value, more quality lean manufacturing applied to IT, what. the agile manifesto was missing. build cross-functional teams to break silos. end to end ownership culture and of what the team builds. create your process map , measure it and improve it. automate CI, CD, tests everything is in version control (Infrastructure, Configuration, Code) and is reviewed leverage the cloud to build more reliable systems, faster DevOps is a culture not a role feedback loops Automation skills are the most important: automate CI, CD automate tests provisioning *Organizations best practices: Agile, DevOps, ITIL, SRE","title":"My Definition of DevOps"},{"location":"discipline-sre.explain.definition.html#references","text":"https://en.wikipedia.org/wiki/Information_lifecycle_management https://en.wikipedia.org/wiki/ITIL https://en.wikipedia.org/wiki/IT_service_management https://enterprisersproject.com/article/2019/11/devops-vs-itil4-vs-SRE https://en.wikipedia.org/wiki/Runbook","title":"References"},{"location":"document-to-edit.md.html","text":"Sample","title":"Document To Edit"},{"location":"friday-night-last-document.html","text":"## My content","title":"Friday Night Last Document"},{"location":"my-first-document-on-netlify-cms.html","text":"Lorem Ipsum","title":"My first document on Netlify CMS"},{"location":"my-second-document.html","text":"Hello World","title":"My second document"},{"location":"pjm.index.html","text":"","title":"Project Management Home Page"},{"location":"priorities.html","text":"Priorities 1. Take care of yourself You, your health, and that of your family are the most important thing. Be careful with overwork, COVID, burnout, and stress. 2. Take care of your project The projects bring the money, paying our salaries and supporting systems like the office, laptops, learning resources, etc. The project should always be healthy before putting our efforts into the next expectations. 3. Contribute to at least one initiative or OKR Wizeline and the discipline initiatives and OKRs are defined (or tried to be defined) to align and continue improving the way we operate, the culture, our people, the business, the opportunities. 4. Improve yourself We are in the business of learning. Like in finance, we should manage our portfolio of skills and technologies. Diversify, adapt, have a strong core or foundation, and may make some high-yield bets. Our industry is always on the move; if we stay still, we will be left behind.","title":"Priorities"},{"location":"priorities.html#priorities","text":"","title":"Priorities"},{"location":"priorities.html#1-take-care-of-yourself","text":"You, your health, and that of your family are the most important thing. Be careful with overwork, COVID, burnout, and stress.","title":"1. Take care of yourself"},{"location":"priorities.html#2-take-care-of-your-project","text":"The projects bring the money, paying our salaries and supporting systems like the office, laptops, learning resources, etc. The project should always be healthy before putting our efforts into the next expectations.","title":"2. Take care of your project"},{"location":"priorities.html#3-contribute-to-at-least-one-initiative-or-okr","text":"Wizeline and the discipline initiatives and OKRs are defined (or tried to be defined) to align and continue improving the way we operate, the culture, our people, the business, the opportunities.","title":"3. Contribute to at least one initiative or OKR"},{"location":"priorities.html#4-improve-yourself","text":"We are in the business of learning. Like in finance, we should manage our portfolio of skills and technologies. Diversify, adapt, have a strong core or foundation, and may make some high-yield bets. Our industry is always on the move; if we stay still, we will be left behind.","title":"4. Improve yourself"},{"location":"qa.index.html","text":"","title":"QA Home Page"},{"location":"sre.index.html","text":"","title":"SRE Home Page"},{"location":"tw.index.html","text":"","title":"Technical Writing Home Page"},{"location":"ux.index.html","text":"","title":"UX & Design Home Page"}]}